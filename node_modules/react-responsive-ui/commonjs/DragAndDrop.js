'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.Files = exports.File = exports.CanDrop = undefined;
exports.DragAndDrop = DragAndDrop;

var _reactDndHtml5Backend = require('react-dnd-html5-backend');

var _reactDndHtml5Backend2 = _interopRequireDefault(_reactDndHtml5Backend);

var _reactDnd = require('react-dnd');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Usage:
//
// import { DragAndDrop, CanDrop, FILE, FILES } from 'react-responsive-ui'
//
// @DragAndDrop()
// class Application extends Component {
// 	render() {
// 		const { isDragging, children } = this.props
// 		return <div>{ children }</div>
// 	}
// }
//
// @CanDrop(FILE, (props, dropped, component) => alert('Uploading file'))
// class FileDropArea extends Component {
// 	render() {
// 		const { dropTarget, draggedOver, canDrop } = this.props
// 		return dropTarget(<div>Drop files here</div>)
// 	}
// }

// Decorate the droppable area component with this decorator
function CanDrop(type, _drop) {
	if (!type) {
		throw new Error('Provide a `type` for `@CanDrop()` decorator');
	}

	return (0, _reactDnd.DropTarget)(get_react_dnd_type(type), {
		drop: function drop(props, monitor, component) {
			return _drop(props, get_dropped_object(monitor, type), component);
		}

		// canDrop(props, monitor)
		// {
		// 	switch (type)
		// 	{
		// 		// // Browser doesn't allow reading "files" until the drop event.
		// 		// case File:
		// 		// 	return monitor.getItem().files.length === 1
		// 		default:
		// 			return true
		// 	}
		// }
	}, function (connect, monitor) {
		return {
			dropTarget: connect.dropTarget(),
			draggedOver: monitor.isOver(),
			canDrop: monitor.canDrop()
		};
	});
}

// Decorate the root React application component with this decorator
exports.CanDrop = CanDrop;
function DragAndDrop() {
	var context = (0, _reactDnd.DragDropContext)(_reactDndHtml5Backend2.default);

	var layer = (0, _reactDnd.DragLayer)(function (monitor) {
		return {
			isDragging: monitor.isDragging()
			// item           : monitor.getItem(),
			// item_type      : monitor.getItemType(),
			// current_offset : monitor.getSourceClientOffset()
		};
	});

	return function (component) {
		return context(layer(component));
	};
}

// Native file drag'n'drop (single file)
var File = exports.File = 'File';

// Native file drag'n'drop (multiple files)
var Files = exports.Files = 'Files';

// Gets the corresponding `react-dnd` type
// for a given droppable object type
function get_react_dnd_type(type) {
	switch (type) {
		case File:
		case Files:
			return _reactDndHtml5Backend.NativeTypes.FILE;
		default:
			return type;
	}
}

// Gets the dropped object from `monitor`
function get_dropped_object(monitor, type) {
	var dropped = monitor.getItem();

	switch (type) {
		case File:
			return dropped.files[0];
		case Files:
			return dropped.files;
		default:
			return dropped;
	}
}
//# sourceMappingURL=DragAndDrop.js.map