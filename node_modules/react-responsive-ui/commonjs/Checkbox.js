'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _dom = require('./utility/dom');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// http://tympanus.net/codrops/2013/10/15/animated-checkboxes-and-radio-buttons-with-svg/

var Checkbox = function (_PureComponent) {
	_inherits(Checkbox, _PureComponent);

	function Checkbox() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, Checkbox);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Checkbox.__proto__ || Object.getPrototypeOf(Checkbox)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this.onKeyDown = function (event) {
			var onKeyDown = _this.props.onKeyDown;


			if (onKeyDown) {
				onKeyDown(event);
			}

			if ((0, _dom.submitFormOnCtrlEnter)(event, _this.checkbox)) {
				return;
			}
		}, _this.toggle = function (event) {
			// If a link was clicked - don't treat it as a checkbox label click.
			// (is used for things like "âœ“ Read and accepted the <a>licence agreement</a>")
			if (event.target.tagName.toLowerCase() === 'a') {
				return;
			}

			_this.focus();

			var _this$props = _this.props,
			    disabled = _this$props.disabled,
			    onChange = _this$props.onChange,
			    value = _this$props.value;


			if (disabled) {
				return;
			}

			// if (value)
			// {
			// 	this.setState({ path_style: undefined })
			// }

			onChange(!value);
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}

	_createClass(Checkbox, [{
		key: 'componentDidMount',


		// Client side rendering, javascript is enabled
		value: function componentDidMount() {
			var _props = this.props,
			    value = _props.value,
			    fallback = _props.fallback;


			if (value) {
				this.draw_checkmark();
			}

			if (fallback) {
				this.setState({ javascript: true });
			}
		}
	}, {
		key: 'componentWillReceiveProps',
		value: function componentWillReceiveProps(next_props) {
			if (this.props.value !== next_props.value) {
				// Allows checkmark animation from now on
				this.was_toggled = true;
			}

			if (this.props.value && !next_props.value) {
				this.setState({ path_style: undefined });
			}
		}
	}, {
		key: 'componentDidUpdate',
		value: function componentDidUpdate(previous_props, previous_state) {
			if (this.props.value && !previous_props.value) {
				this.draw_checkmark();
			}
		}
	}, {
		key: 'render',
		value: function render() {
			var _this2 = this;

			var _props2 = this.props,
			    value = _props2.value,
			    error = _props2.error,
			    indicateInvalid = _props2.indicateInvalid,
			    multiline = _props2.multiline,
			    disabled = _props2.disabled,
			    children = _props2.children,
			    fallback = _props2.fallback,
			    style = _props2.style,
			    className = _props2.className;


			return _react2.default.createElement(
				'div',
				{
					className: (0, _classnames2.default)('rrui__checkbox', {
						'rrui__rich': fallback,
						'rrui__checkbox--checked': value,
						'rrui__checkbox--invalid': indicateInvalid && error,
						'rrui__checkbox--disabled': disabled
					}, className),
					style: style },
				_react2.default.createElement(
					'div',
					{
						className: (0, _classnames2.default)('rrui__input', {
							'rrui__input--multiline': multiline
						}) },
					_react2.default.createElement(
						'div',
						{
							className: (0, _classnames2.default)('rrui__checkbox__checkbox', {
								'rrui__checkbox__checkbox--multiline': multiline
							}) },
						_react2.default.createElement('input', {
							ref: function ref(_ref2) {
								return _this2.checkbox = _ref2;
							},
							type: 'checkbox',
							checked: value,
							disabled: disabled,
							onKeyDown: this.onKeyDown,
							onChange: this.toggle,
							onFocus: this.on_focus,
							onBlur: this.on_blur,
							className: 'rrui__checkbox__input' }),
						_react2.default.createElement('div', {
							className: (0, _classnames2.default)('rrui__checkbox__box', {
								'rrui__checkbox__box--no-label': !children
							}) }),
						_react2.default.createElement(
							'svg',
							{
								viewBox: checkmark_svg_canvas_dimensions,
								className: 'rrui__checkbox__checkmark' },
							value ? this.render_checkmark() : null
						)
					),
					children && _react2.default.createElement(
						'label',
						{
							onClick: this.toggle,
							className: (0, _classnames2.default)('rrui__checkbox__label', {
								'rrui__checkbox__label--multiline': multiline
							}) },
						children
					)
				),
				indicateInvalid && error && _react2.default.createElement(
					'div',
					{ className: 'rrui__input-error' },
					error
				),
				fallback && !this.state.javascript && this.render_static()
			);
		}
	}, {
		key: 'render_checkmark',
		value: function render_checkmark() {
			var _this3 = this;

			var path_style = this.state.path_style;

			// For a web browser

			if (typeof window !== 'undefined') {
				return _react2.default.createElement('path', {
					ref: function ref(_ref3) {
						return _this3.path = _ref3;
					},
					d: checkmark_svg_path,
					style: path_style || checkmark_svg_path_style });
			}

			// For Node.js
			return _react2.default.createElement('path', {
				d: checkmark_svg_path,
				style: checkmark_svg_path_style });
		}

		// supports disabled javascript

	}, {
		key: 'render_static',
		value: function render_static() {
			var _props3 = this.props,
			    name = _props3.name,
			    value = _props3.value,
			    focus = _props3.focus,
			    disabled = _props3.disabled,
			    children = _props3.children;


			return _react2.default.createElement(
				'div',
				{ className: 'rrui__rich__fallback' },
				_react2.default.createElement('input', {
					type: 'checkbox',
					name: name,
					disabled: disabled,
					defaultChecked: value,
					autoFocus: focus }),
				_react2.default.createElement(
					'label',
					{ className: 'rrui__checkbox__label rrui__checkbox__label--fallback' },
					children
				)
			);
		}
	}, {
		key: 'draw_checkmark',
		value: function draw_checkmark() {
			var i = 0;

			var path_element = _reactDom2.default.findDOMNode(this.path);

			var animation = { speed: .1, easing: 'ease-in-out' };

			var path_style = {};

			var length = path_element.getTotalLength(); // in pixels
			path_style.strokeDasharray = length + ' ' + length;

			path_element.style.strokeDashoffset = Math.floor(length) - 1;

			// Trigger a layout so styles are calculated & the browser
			// picks up the starting position before animating
			path_element.getBoundingClientRect();

			// Define our transition
			// (skips the animation on the initial page render on the client side)
			if (this.was_toggled) {
				path_style.transition = path_element.style.WebkitTransition = path_element.style.MozTransition = 'stroke-dashoffset ' + animation.speed + 's ' + animation.easing + ' ' + i * animation.speed + 's';
			}

			// Go
			path_style.strokeDashoffset = 0;

			this.setState({ path_style: _extends({}, path_style, svg_path_style) });
		}
	}, {
		key: 'focus',
		value: function focus() {
			_reactDom2.default.findDOMNode(this.checkbox).focus();
		}
	}]);

	return Checkbox;
}(_react.PureComponent);

Checkbox.propTypes = {
	// HTML form field "name"
	name: _propTypes2.default.string,

	// `true`/`false`
	value: _propTypes2.default.bool.isRequired,

	// Set to `true` to enable multiline label
	multiline: _propTypes2.default.bool.isRequired,

	// Disables the checkbox
	disabled: _propTypes2.default.bool.isRequired,

	// `onChange` handler
	onChange: _propTypes2.default.func.isRequired,

	// When `true` autofocuses the checkbox
	focus: _propTypes2.default.bool.isRequired,

	// The label (text)
	children: _propTypes2.default.node,

	// (exotic use case)
	// Falls back to a plain HTML input
	// when javascript is disabled (e.g. Tor)
	fallback: _propTypes2.default.bool.isRequired,

	// CSS class
	className: _propTypes2.default.string,

	// CSS style object
	style: _propTypes2.default.object
};
Checkbox.defaultProps = {
	disabled: false,
	value: false,
	fallback: false,
	multiline: false,
	focus: false };
exports.default = Checkbox;


var checkmark_svg_canvas_dimensions = '0 0 100 100';
var checkmark_svg_path = ['M16.667,62.167c3.109,5.55,7.217,10.591,10.926,15.75 c2.614,3.636,5.149,7.519,8.161,10.853c-0.046-0.051,1.959,2.414,2.692,2.343c0.895-0.088,6.958-8.511,6.014-7.3 c5.997-7.695,11.68-15.463,16.931-23.696c6.393-10.025,12.235-20.373,18.104-30.707C82.004,24.988,84.802,20.601,87,16'];

var checkmark_svg_path_style = {
	fill: 'transparent',
	strokeLinecap: 'round',
	strokeLinejoin: 'round'
};

var svg_path_style = {
	strokeLinecap: 'round',
	strokeLinejoin: 'round',
	fill: 'none'
};
//# sourceMappingURL=Checkbox.js.map