'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _dom = require('./utility/dom');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FileUpload = function (_PureComponent) {
	_inherits(FileUpload, _PureComponent);

	function FileUpload() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, FileUpload);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = FileUpload.__proto__ || Object.getPrototypeOf(FileUpload)).call.apply(_ref, [this].concat(args))), _this), _this.on_input_click = function (event) {
			event.stopPropagation();
		}, _this.on_input_change = function (event) {
			_this.on_file_selected(event);
		}, _this.on_file_selected = function (event) {
			var _this$props = _this.props,
			    action = _this$props.action,
			    multiple = _this$props.multiple;


			var data = event.target.files;

			if (!multiple) {
				data = data[0];
			}

			action(data);

			// reset the selected file
			// so that onChange would trigger again
			// even with the same file
			event.target.value = null;
		}, _this.on_click = function (event) {
			var _this$props2 = _this.props,
			    disabled = _this$props2.disabled,
			    onClick = _this$props2.onClick;


			if (disabled) {
				return event.preventDefault();
			}

			if (onClick) {
				onClick();
			}

			_this.file_upload.click();
		}, _this.onKeyDown = function (event) {
			var onKeyDown = _this.props.onKeyDown;


			if (onKeyDown) {
				onKeyDown(event);
			}

			if ((0, _dom.submitFormOnCtrlEnter)(event, _this.file_upload)) {
				return;
			}
		}, _this.storeInputComponent = function (_) {
			return _this.file_upload = _;
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}

	// Not working for some reason.
	// (doesn't get called)


	_createClass(FileUpload, [{
		key: 'render',
		value: function render() {
			var _props = this.props,
			    disabled = _props.disabled,
			    style = _props.style,
			    className = _props.className,
			    children = _props.children;


			return _react2.default.createElement(
				'div',
				{
					style: style,
					className: (0, _classnames2.default)('rrui__file-upload', className, {
						'rrui__file-upload--disabled': disabled
					}),
					onKeyDown: this.onKeyDown,
					onClick: this.on_click },
				_react2.default.createElement('input', {
					type: 'file',
					ref: this.storeInputComponent,
					key: 'file_input',
					style: input_style,
					onClick: this.on_click,
					onChange: this.on_input_change }),
				children
			);
		}
	}]);

	return FileUpload;
}(_react.PureComponent);

FileUpload.propTypes = {
	// On file chosen handler
	action: _propTypes2.default.func.isRequired,

	// Allows choosing multiple files if `true`
	multiple: _propTypes2.default.bool,

	// Disables the file input
	disabled: _propTypes2.default.bool,

	// `onClick` handler
	onClick: _propTypes2.default.func,

	// The clickable area, like "Click here to choose a file"
	children: _propTypes2.default.node,

	// CSS class
	className: _propTypes2.default.string,

	// CSS style object
	style: _propTypes2.default.object
};
exports.default = FileUpload;


var input_style = {
	display: 'none'
};
//# sourceMappingURL=FileUpload.js.map