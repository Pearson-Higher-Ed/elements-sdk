{"version":3,"sources":["../source/TextInput.js"],"names":["React","PureComponent","createElement","PropTypes","ReactDOM","classNames","throttle","submitFormOnCtrlEnter","get_modular_grid_unit","TextInput","state","autoresize","event","measurements","element","target","findDOMNode","input","style","height","scrollHeight","extra_height","Math","max","initial_height","ceil","on_window_resize","on_change","value","undefined","props","onChange","previous_value","onKeyDown","multiline","fallback","window","addEventListener","setState","javascript","removeEventListener","id","name","placeholder","label","labelStyle","disabled","required","floatingLabel","className","label_floats","render_input","should_indicate_invalid","is_empty","render_error_message","render_static","options","ref","focus","inputStyle","rows","cols","tabIndex","inputComponent","onFocus","onBlur","autoComplete","input_style","resize","properties","autoFocus","type","get_input_type","getInputComponent","error","email","password","trim","indicateInvalid","autoresize_measure","measure","propTypes","string","oneOfType","number","func","isRequired","bool","object","defaultProps","getComputedStyle","parseInt","borderTopWidth","borderBottomWidth","non_rounded_initial_height","getBoundingClientRect"],"mappings":"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","file":"TextInput.js","sourcesContent":["import React, { PureComponent, createElement } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport ReactDOM from 'react-dom'\r\nimport classNames from 'classnames'\r\nimport throttle from 'lodash/throttle'\r\n\r\nimport { submitFormOnCtrlEnter } from './utility/dom'\r\nimport { get_modular_grid_unit } from './utility/grid'\r\n\r\nexport default class TextInput extends PureComponent\r\n{\r\n\tstate = {}\r\n\r\n\tstatic propTypes =\r\n\t{\r\n\t\t// Text field label\r\n\t\tlabel            : PropTypes.string,\r\n\r\n\t\t// HTML form input `name` attribute\r\n\t\tname             : PropTypes.string,\r\n\r\n\t\t// Text field value\r\n\t\tvalue            : PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n\r\n\t\t// Is called when the `value` is edited\r\n\t\tonChange         : PropTypes.func.isRequired,\r\n\r\n\t\t// Disables the text field\r\n\t\tdisabled         : PropTypes.bool,\r\n\r\n\t\t// Renders an error message below the `<input/>`\r\n\t\terror            : PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\r\n\r\n\t\t// If this flag is `true` then the `error` is shown.\r\n\t\t// If this flag is `false` then the `error` is not shown (even if passed).\r\n\t\tindicateInvalid  : PropTypes.bool,\r\n\r\n\t\t// Set to `true` to mark the field as required\r\n\t\trequired         : PropTypes.bool.isRequired,\r\n\r\n\t\t// `<input/>` placeholder\r\n\t\tplaceholder      : PropTypes.string,\r\n\r\n\t\t// Set to `false` to prevent the `<label/>` from floating\r\n\t\tfloatingLabel    : PropTypes.bool.isRequired,\r\n\r\n\t\t// `<textarea/>` instead of an `<input type=\"text\"/>`\r\n\t\tmultiline        : PropTypes.bool,\r\n\r\n\t\t// Sets HTML input `type` attribute to `email`\r\n\t\temail            : PropTypes.bool,\r\n\r\n\t\t// Sets HTML input `type` attribute to `password`\r\n\t\tpassword         : PropTypes.bool,\r\n\r\n\t\t// A manually specified `type` attribute\r\n\t\ttype             : PropTypes.string.isRequired,\r\n\r\n\t\t// Whether `<textarea/>` should autoresize itself\r\n\t\t// (is `true` by default)\r\n\t\tautoresize       : PropTypes.bool.isRequired,\r\n\r\n\t\t// Autofocuses the input field\r\n\t\tfocus            : PropTypes.bool,\r\n\r\n\t\t// HTML `tabindex` attribute\r\n\t\ttabIndex         : PropTypes.number,\r\n\r\n\t\t// `<textarea/>` `rows` attribute (row count, i.e. height)\r\n\t\trows             : PropTypes.number,\r\n\r\n\t\t// `<textarea/>` `cols` attribute (column count, i.e. width)\r\n\t\tcols             : PropTypes.number,\r\n\r\n\t\t// A custom `input` component can be passed\r\n\t\tinput            : PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\r\n\t\tinputComponent   : PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\r\n\r\n\t\t// (exotic use case)\r\n\t\t// Falls back to a plain HTML input\r\n\t\t// when javascript is disabled (e.g. Tor)\r\n\t\tfallback         : PropTypes.bool.isRequired,\r\n\r\n\t\t// Is called when the input is focused\r\n\t\tonFocus          : PropTypes.func,\r\n\r\n\t\t// `onKeyDown` event handler\r\n\t\tonKeyDown        : PropTypes.func,\r\n\r\n\t\t// Is called when the input is blurred\r\n\t\tonBlur           : PropTypes.func,\r\n\r\n\t\t// CSS style object\r\n\t\tstyle            : PropTypes.object,\r\n\r\n\t\t// CSS name\r\n\t\tclassName        : PropTypes.string,\r\n\r\n\t\t// CSS style object for `<input/>`\r\n\t\tinputStyle       : PropTypes.object,\r\n\r\n\t\t// CSS style object for the label\r\n\t\tlabelStyle       : PropTypes.object\r\n\t}\r\n\r\n\tstatic defaultProps =\r\n\t{\r\n\t\t// HTML input `type` attribute\r\n\t\ttype : 'text',\r\n\r\n\t\t// `<textarea/>` should autoresize itself\r\n\t\tautoresize : true,\r\n\r\n\t\t// Set to `false` to prevent the `<label/>` from floating\r\n\t\tfloatingLabel : true,\r\n\r\n\t\t// Javascriptless users support (e.g. Tor)\r\n\t\tfallback : false,\r\n\r\n\t\t// Set to `true` to mark the field as required\r\n\t\trequired : false\r\n\t}\r\n\r\n\t// Client side rendering, javascript is enabled\r\n\tcomponentDidMount()\r\n\t{\r\n\t\tconst { multiline, autoresize, fallback, value } = this.props\r\n\r\n\t\t// Doing `this.measure()` here now\r\n\t\t// because `<textarea/>` should autoresize\r\n\t\t// in case its `value` is set up front.\r\n\t\t// // Not doing `this.measure()` here because\r\n\t\t// // that resulted in weird `<textarea/>` height mismatch.\r\n\t\t// // Measuring the height of `<textarea/>` during\r\n\t\t// // the first `this.measurements()` call instead.\r\n\r\n\t\tif (multiline && autoresize && value)\r\n\t\t{\r\n\t\t\tthis.autoresize()\r\n\t\t}\r\n\r\n\t\tif (multiline && autoresize)\r\n\t\t{\r\n\t\t\twindow.addEventListener('resize', this.on_window_resize)\r\n\t\t}\r\n\r\n\t\tif (fallback)\r\n\t\t{\r\n\t\t\tthis.setState({ javascript: true })\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentWillUnmount()\r\n\t{\r\n\t\tconst { multiline, autoresize } = this.props\r\n\r\n\t\tif (multiline && autoresize)\r\n\t\t{\r\n\t\t\twindow.removeEventListener('resize', this.on_window_resize)\r\n\t\t}\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tid,\r\n\t\t\tname,\r\n\t\t\tvalue,\r\n\t\t\tplaceholder,\r\n\t\t\tlabel,\r\n\t\t\tlabelStyle,\r\n\t\t\tmultiline,\r\n\t\t\tfallback,\r\n\t\t\tdisabled,\r\n\t\t\trequired,\r\n\t\t\tfloatingLabel,\r\n\t\t\tstyle,\r\n\t\t\tclassName\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tconst label_floats = placeholder === undefined && floatingLabel\r\n\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\tstyle={ style }\r\n\t\t\t\tclassName={ classNames\r\n\t\t\t\t(\r\n\t\t\t\t\t'rrui__text-input',\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t'rrui__rich' : fallback\r\n\t\t\t\t\t},\r\n\t\t\t\t\tclassName\r\n\t\t\t\t) }>\r\n\r\n\t\t\t\t{/* `<input/>` and its `<label/>` */}\r\n\t\t\t\t<div\r\n\t\t\t\t\tclassName={ classNames('rrui__input',\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t'rrui__input--multiline' : multiline,\r\n\t\t\t\t\t}) }>\r\n\r\n\t\t\t\t\t{/* `<input/>` */}\r\n\t\t\t\t\t{ this.render_input({ name: false }) }\r\n\r\n\t\t\t\t\t{/* Input `<label/>`. */}\r\n\t\t\t\t\t{/* It is rendered after the input to utilize the\r\n\t\t\t\t       `input:focus + label` CSS selector rule */}\r\n\t\t\t\t\t{ label &&\r\n\t\t\t\t\t\t<label\r\n\t\t\t\t\t\t\thtmlFor={ id }\r\n\t\t\t\t\t\t\tclassName={ classNames('rrui__input-label',\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t// CSS selector performance optimization\r\n\t\t\t\t\t\t\t\t'rrui__input-label--invalid'           : this.should_indicate_invalid(),\r\n\t\t\t\t\t\t\t\t'rrui__input-label--floating'          : label_floats,\r\n\t\t\t\t\t\t\t\t'rrui__input-label--required'          : required && this.is_empty(),\r\n\t\t\t\t\t\t\t\t'rrui__text-input__label--placeholder' : label_floats && this.is_empty()\r\n\t\t\t\t\t\t\t}) }\r\n\t\t\t\t\t\t\tstyle={ labelStyle }>\r\n\t\t\t\t\t\t\t{ label }\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{/* Error message */}\r\n\t\t\t\t{ this.should_indicate_invalid() && this.render_error_message() }\r\n\r\n\t\t\t\t{/* Fallback in case javascript is disabled (no animated <label/>) */}\r\n\t\t\t\t{ fallback && !this.state.javascript && this.render_static() }\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n\trender_input(options = {})\r\n\t{\r\n\t\tconst { placeholder, ref, name } = options\r\n\r\n\t\tconst\r\n\t\t{\r\n\t\t\tvalue,\r\n\t\t\tmultiline,\r\n\t\t\tfocus,\r\n\t\t\tonChange,\r\n\t\t\tdisabled,\r\n\t\t\tinputStyle,\r\n\t\t\trows,\r\n\t\t\tcols,\r\n\t\t\ttabIndex,\r\n\t\t\tautoresize,\r\n\r\n\t\t\t// A custom input component\r\n\t\t\t// (e.g. for an `input-format` text input, like a phone number)\r\n\t\t\tinput,\r\n\t\t\tinputComponent,\r\n\r\n\t\t\t// Passthrough properties\r\n\t\t\tid,\r\n\t\t\tonFocus,\r\n\t\t\tonBlur,\r\n\t\t\tautoComplete\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tlet input_style = inputStyle\r\n\r\n\t\tif (multiline && autoresize)\r\n\t\t{\r\n\t\t\tinput_style =\r\n\t\t\t{\r\n\t\t\t\tresize : 'none',\r\n\t\t\t\t...inputStyle\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst properties =\r\n\t\t{\r\n\t\t\tid,\r\n\t\t\tname        : name === false ? undefined : this.props.name,\r\n\t\t\tref         : ref === false ? undefined : ref => this.input = ref,\r\n\t\t\tvalue       : (value === undefined || value === null) ? '' : value,\r\n\t\t\tplaceholder : placeholder || this.props.placeholder,\r\n\t\t\tonChange    : this.on_change,\r\n\t\t\tonKeyDown   : this.onKeyDown,\r\n\t\t\tonFocus,\r\n\t\t\tonBlur,\r\n\t\t\tautoComplete,\r\n\t\t\tdisabled,\r\n\t\t\tclassName   : classNames\r\n\t\t\t(\r\n\t\t\t\t'rrui__input-element',\r\n\t\t\t\t'rrui__input-field',\r\n\t\t\t\t{\r\n\t\t\t\t\t// CSS selector performance optimization\r\n\t\t\t\t\t'rrui__input-field--invalid'   : this.should_indicate_invalid(),\r\n\t\t\t\t\t'rrui__input-field--disabled'  : disabled,\r\n\t\t\t\t\t'rrui__input-field--multiline' : multiline\r\n\t\t\t\t}\r\n\t\t\t),\r\n\t\t\tstyle       : input_style,\r\n\t\t\tautoFocus   : focus,\r\n\t\t\ttabIndex\r\n\t\t}\r\n\r\n\t\t// In case of `multiline` set to `true`\r\n\t\t// this is gonna be a `<textarea/>`\r\n\t\tif (multiline)\r\n\t\t{\r\n\t\t\t// \"keyup\" is required for IE to properly reset height when deleting text\r\n\t\t\treturn (\r\n\t\t\t\t<textarea\r\n\t\t\t\t\trows={ rows }\r\n\t\t\t\t\tcols={ cols }\r\n\t\t\t\t\tonInput={ autoresize ? this.autoresize : undefined }\r\n\t\t\t\t\tonKeyUp={ autoresize ? this.autoresize : undefined }\r\n\t\t\t\t\t{ ...properties }/>\r\n\t\t\t)\r\n\t\t}\r\n\r\n\t\t// Add `<input/>` `type` to properties\r\n\t\tproperties.type = this.get_input_type()\r\n\r\n\t\t// If a custom `input` component was passed then use it.\r\n\t\t// Otherwise use a simple `<input/>`.\r\n\t\treturn createElement(this.getInputComponent(), properties)\r\n\t}\r\n\r\n\trender_error_message()\r\n\t{\r\n\t\tconst { error } = this.props\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"rrui__input-error\">\r\n\t\t\t\t{ error }\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n\t// Fallback in case javascript is disabled (no animated <label/>)\r\n\trender_static()\r\n\t{\r\n\t\tconst { label } = this.props\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"rrui__rich__fallback\">\r\n\t\t\t\t{/* <input/> */}\r\n\t\t\t\t{ this.render_input({ placeholder: label, ref: false }) }\r\n\r\n\t\t\t\t{/* Error message */}\r\n\t\t\t\t{ this.should_indicate_invalid() && this.render_error_message() }\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n\tgetInputComponent()\r\n\t{\r\n\t\tconst { input, inputComponent } = this.props\r\n\r\n\t\treturn input || inputComponent || 'input'\r\n\t}\r\n\r\n\t// \"text\", \"email\", \"password\", etc\r\n\tget_input_type()\r\n\t{\r\n\t\tconst { type, email, password } = this.props\r\n\r\n\t\tif (email)\r\n\t\t{\r\n\t\t\treturn 'email'\r\n\t\t}\r\n\r\n\t\tif (password)\r\n\t\t{\r\n\t\t\treturn 'password'\r\n\t\t}\r\n\r\n\t\treturn type\r\n\t}\r\n\r\n\t// Whether the input is empty\r\n\tis_empty()\r\n\t{\r\n\t\tconst { value } = this.props\r\n\r\n\t\t// `0` is not an empty value\r\n\t\tif (typeof value === 'number' && value === 0)\r\n\t\t{\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n\t\t// An empty string, `undefined`, `null` –\r\n\t\t// all those are an empty value.\r\n\t\tif (!value)\r\n\t\t{\r\n\t\t\treturn true\r\n\t\t}\r\n\r\n\t\t// Whitespace string is also considered empty\r\n\t\tif (typeof value === 'string' && !value.trim())\r\n\t\t{\r\n\t\t\treturn true\r\n\t\t}\r\n\r\n\t\t// Not empty\r\n\t\treturn false\r\n\t}\r\n\r\n\t// Whether should indicate that the input value is invalid\r\n\tshould_indicate_invalid()\r\n\t{\r\n\t\tconst { indicateInvalid, error } = this.props\r\n\r\n\t\treturn indicateInvalid && error\r\n\t}\r\n\r\n\tautoresize = (event) =>\r\n\t{\r\n\t\tconst measurements = this.measurements()\r\n\t\tconst element = event ? event.target : ReactDOM.findDOMNode(this.input)\r\n\r\n\t\telement.style.height = 0\r\n\r\n\t\t// `element.scrollHeight` is always an integer\r\n\t\t// so it doesn't need rounding (e.g. `em`s).\r\n\t\tlet height = element.scrollHeight + measurements.extra_height\r\n\t\theight = Math.max(height, measurements.initial_height)\r\n\r\n\t\tif (get_modular_grid_unit() && height % get_modular_grid_unit())\r\n\t\t{\r\n\t\t\theight = Math.ceil(height / get_modular_grid_unit()) * get_modular_grid_unit()\r\n\t\t}\r\n\r\n\t\t// For some reason Chrome on Windows 10\r\n\t\t// requires an extra pixel been added\r\n\t\t// to avoid showing vertical scrollbar.\r\n\t\t// (Jan 11, 2018)\r\n\t\tif (height > measurements.initial_height)\r\n\t\t{\r\n\t\t\theight += 1\r\n\t\t}\r\n\r\n\t\telement.style.height = height + 'px'\r\n\t}\r\n\r\n\ton_window_resize = throttle((event) => this.autoresize(), 100)\r\n\r\n\t// The underlying `input` component\r\n\t// can pass both `event`s and `value`s\r\n\t// to this parent `onChange` listener.\r\n\ton_change = (event) =>\r\n\t{\r\n\t\t// Extract `value` from the argument\r\n\t\t// of this `onChange` listener\r\n\t\t// (for convenience)\r\n\r\n\t\tlet value = event\r\n\r\n\t\tif (event.target !== undefined)\r\n\t\t{\r\n\t\t\tvalue = event.target.value\r\n\t\t}\r\n\r\n\t\t// Call the parent `onChange` handler\r\n\t\t// with the `value` as an argument\r\n\t\t// (for convenience)\r\n\r\n\t\tconst { onChange, value: previous_value } = this.props\r\n\r\n\t\t// Call `onChange` only if `value` did actually change\r\n\t\tif (value !== previous_value)\r\n\t\t{\r\n\t\t\tonChange(value)\r\n\t\t}\r\n\t}\r\n\r\n\tonKeyDown = (event) =>\r\n\t{\r\n\t\tconst { onKeyDown } = this.props\r\n\r\n\t\tif (onKeyDown)\r\n\t\t{\r\n\t\t\tonKeyDown(event)\r\n\t\t}\r\n\r\n\t\tif (submitFormOnCtrlEnter(event, this.input))\r\n\t\t{\r\n\t\t\treturn\r\n\t\t}\r\n\t}\r\n\r\n\tfocus()\r\n\t{\r\n\t\t// For simple DOM nodes like `<input/>`\r\n\t\t// just focus on them.\r\n\t\tif (typeof this.getInputComponent() === 'string') {\r\n\t\t\treturn ReactDOM.findDOMNode(this.input).focus()\r\n\t\t}\r\n\r\n\t\t// For custom components call `.focus()` on them\r\n\t\t// (if available)\r\n\t\treturn this.input.focus && this.input.focus()\r\n\t}\r\n\r\n\tmeasure()\r\n\t{\r\n\t\treturn autoresize_measure(ReactDOM.findDOMNode(this.input))\r\n\t}\r\n\r\n\tmeasurements()\r\n\t{\r\n\t\tlet measurements = this.state.autoresize\r\n\r\n\t\t// If it's the first time accessing measurements,\r\n\t\t// or if the textarea was initially hidden\r\n\t\t// (like `display: none` for a mobile-oriented responsive design)\r\n\t\t// then make the initial measurements now.\r\n\t\tif (!measurements || !measurements.initial_height)\r\n\t\t{\r\n\t\t\tmeasurements = this.measure()\r\n\r\n\t\t\t// If the `<textarea/>` is not hidden (e.g. via `display: none`)\r\n\t\t\t// then keep its initial (minimum) height\r\n\t\t\t// so that it doesn't shrink below this value\r\n\t\t\tif (measurements.initial_height)\r\n\t\t\t{\r\n\t\t\t\tthis.setState({ autoresize: measurements })\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn measurements\r\n\t}\r\n}\r\n\r\n// <textarea/> autoresize (without ghost elements)\r\n// https://github.com/javierjulio/textarea-autosize/blob/master/src/jquery.textarea_autosize.js\r\nfunction autoresize_measure(element)\r\n{\r\n\tconst style = window.getComputedStyle(element)\r\n\r\n\t// Borders extra height, because `.scrollHeight` doesn't include borders.\r\n\tconst extra_height =\r\n\t\tparseInt(style.borderTopWidth) +\r\n\t\tparseInt(style.borderBottomWidth)\r\n\r\n\t// `<textarea/>`'s height is a float when using `em`, `rem`, `pt`, etc.\r\n\tconst non_rounded_initial_height = element.getBoundingClientRect().height\r\n\tconst initial_height = Math.ceil(non_rounded_initial_height)\r\n\r\n\t// Round the height of `<textarea/>` so that it doesn't jump\r\n\t// when autoresizing while typing for the first time.\r\n\tif (initial_height !== non_rounded_initial_height)\r\n\t{\r\n\t\telement.style.height = initial_height + 'px'\r\n\t}\r\n\r\n\treturn { extra_height, initial_height }\r\n}\r\n"]}