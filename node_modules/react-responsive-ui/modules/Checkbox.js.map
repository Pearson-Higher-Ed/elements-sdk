{"version":3,"sources":["../source/Checkbox.js"],"names":["React","PureComponent","PropTypes","ReactDOM","classNames","submitFormOnCtrlEnter","Checkbox","state","onKeyDown","event","props","checkbox","toggle","target","tagName","toLowerCase","focus","disabled","onChange","value","fallback","draw_checkmark","setState","javascript","next_props","was_toggled","path_style","undefined","previous_props","previous_state","error","indicateInvalid","multiline","children","style","className","ref","on_focus","on_blur","checkmark_svg_canvas_dimensions","render_checkmark","render_static","window","path","checkmark_svg_path","checkmark_svg_path_style","name","i","path_element","findDOMNode","animation","speed","easing","length","getTotalLength","strokeDasharray","strokeDashoffset","Math","floor","getBoundingClientRect","transition","WebkitTransition","MozTransition","svg_path_style","propTypes","string","bool","isRequired","func","node","object","defaultProps","fill","strokeLinecap","strokeLinejoin"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,UAAP,MAAuB,YAAvB;;AAEA,SAASC,qBAAT,QAAsC,eAAtC;;AAEA;;IAEqBC,Q;;;;;;;;;;;;;;wLAEpBC,K,GAAQ,E,QAoFRC,S,GAAY,UAACC,KAAD,EACZ;AAAA,OACSD,SADT,GACuB,MAAKE,KAD5B,CACSF,SADT;;;AAGC,OAAIA,SAAJ,EACA;AACCA,cAAUC,KAAV;AACA;;AAED,OAAIJ,sBAAsBI,KAAtB,EAA6B,MAAKE,QAAlC,CAAJ,EACA;AACC;AACA;AACD,G,QA0KDC,M,GAAS,UAACH,KAAD,EACT;AACC;AACA;AACA,OAAIA,MAAMI,MAAN,CAAaC,OAAb,CAAqBC,WAArB,OAAuC,GAA3C,EACA;AACC;AACA;;AAED,SAAKC,KAAL;;AARD,qBAUuC,MAAKN,KAV5C;AAAA,OAUSO,QAVT,eAUSA,QAVT;AAAA,OAUmBC,QAVnB,eAUmBA,QAVnB;AAAA,OAU6BC,KAV7B,eAU6BA,KAV7B;;;AAYC,OAAIF,QAAJ,EACA;AACC;AACA;;AAED;AACA;AACA;AACA;;AAEAC,YAAS,CAACC,KAAV;AACA,G;;;;;;;AArPD;sCAEA;AAAA,gBAC6B,KAAKT,KADlC;AAAA,OACSS,KADT,UACSA,KADT;AAAA,OACgBC,QADhB,UACgBA,QADhB;;;AAGC,OAAID,KAAJ,EACA;AACC,SAAKE,cAAL;AACA;;AAED,OAAID,QAAJ,EACA;AACC,SAAKE,QAAL,CAAc,EAAEC,YAAY,IAAd,EAAd;AACA;AACD;;;4CAEyBC,U,EAC1B;AACC,OAAI,KAAKd,KAAL,CAAWS,KAAX,KAAqBK,WAAWL,KAApC,EACA;AACC;AACA,SAAKM,WAAL,GAAmB,IAAnB;AACA;;AAED,OAAI,KAAKf,KAAL,CAAWS,KAAX,IAAoB,CAACK,WAAWL,KAApC,EACA;AACC,SAAKG,QAAL,CAAc,EAAEI,YAAYC,SAAd,EAAd;AACA;AACD;;;qCAEkBC,c,EAAgBC,c,EACnC;AACC,OAAI,KAAKnB,KAAL,CAAWS,KAAX,IAAoB,CAACS,eAAeT,KAAxC,EACA;AACC,SAAKE,cAAL;AACA;AACD;;;2BAkBD;AAAA;;AAAA,iBAaG,KAAKX,KAbR;AAAA,OAGES,KAHF,WAGEA,KAHF;AAAA,OAIEW,KAJF,WAIEA,KAJF;AAAA,OAKEC,eALF,WAKEA,eALF;AAAA,OAMEC,SANF,WAMEA,SANF;AAAA,OAOEf,QAPF,WAOEA,QAPF;AAAA,OAQEgB,QARF,WAQEA,QARF;AAAA,OASEb,QATF,WASEA,QATF;AAAA,OAUEc,KAVF,WAUEA,KAVF;AAAA,OAWEC,SAXF,WAWEA,SAXF;;;AAeC,UACC;AAAA;AAAA;AACC,gBAAY/B,WAAW,gBAAX,EACZ;AACC,oBAA6BgB,QAD9B;AAEC,iCAA6BD,KAF9B;AAGC,iCAA6BY,mBAAmBD,KAHjD;AAIC,kCAA6Bb;AAJ9B,MADY,EAOZkB,SAPY,CADb;AASC,YAAQD,KATT;AAWC;AAAA;AAAA;AACC,iBAAY9B,WAAW,aAAX,EACZ;AACC,iCAA2B4B;AAD5B,OADY,CADb;AAMC;AAAA;AAAA;AACC,kBAAY5B,WAAW,0BAAX,EACZ;AACC,+CAAwC4B;AADzC,QADY,CADb;AAMC;AACC,YAAM;AAAA,eAAO,OAAKrB,QAAL,GAAgByB,KAAvB;AAAA,QADP;AAEC,aAAK,UAFN;AAGC,gBAAUjB,KAHX;AAIC,iBAAWF,QAJZ;AAKC,kBAAY,KAAKT,SALlB;AAMC,iBAAW,KAAKI,MANjB;AAOC,gBAAU,KAAKyB,QAPhB;AAQC,eAAS,KAAKC,OARf;AASC,kBAAU,uBATX,GAND;AAiBC;AACC,kBAAYlC,WAAW,qBAAX,EACZ;AACC,yCAAkC,CAAC6B;AADpC,QADY,CADb,GAjBD;AAuBC;AAAA;AAAA;AACC,iBAAUM,+BADX;AAEC,mBAAU,2BAFX;AAGGpB,eAAQ,KAAKqB,gBAAL,EAAR,GAAkC;AAHrC;AAvBD,MAND;AAoCGP,iBACD;AAAA;AAAA;AACC,gBAAU,KAAKrB,MADhB;AAEC,kBAAYR,WAAW,uBAAX,EACZ;AACC,4CAAqC4B;AADtC,QADY,CAFb;AAMGC;AANH;AArCF,KAXD;AA2DGF,uBAAmBD,KAAnB,IAA4B;AAAA;AAAA,OAAK,WAAU,mBAAf;AAAqCA;AAArC,KA3D/B;AA6DGV,gBAAY,CAAC,KAAKb,KAAL,CAAWgB,UAAxB,IAAsC,KAAKkB,aAAL;AA7DzC,IADD;AAiEA;;;qCAGD;AAAA;;AAAA,OACSf,UADT,GACwB,KAAKnB,KAD7B,CACSmB,UADT;;AAGC;;AACA,OAAI,OAAOgB,MAAP,KAAkB,WAAtB,EACA;AACC,WACC;AACC,UAAM;AAAA,aAAO,OAAKC,IAAL,GAAYP,KAAnB;AAAA,MADP;AAEC,QAAIQ,kBAFL;AAGC,YAAQlB,cAAcmB,wBAHvB,GADD;AAMA;;AAED;AACA,UACC;AACC,OAAID,kBADL;AAEC,WAAQC,wBAFT,GADD;AAKA;;AAED;;;;kCAEA;AAAA,iBACoD,KAAKnC,KADzD;AAAA,OACSoC,IADT,WACSA,IADT;AAAA,OACe3B,KADf,WACeA,KADf;AAAA,OACsBH,KADtB,WACsBA,KADtB;AAAA,OAC6BC,QAD7B,WAC6BA,QAD7B;AAAA,OACuCgB,QADvC,WACuCA,QADvC;;;AAGC,UACC;AAAA;AAAA,MAAK,WAAU,sBAAf;AAEC;AACC,WAAK,UADN;AAEC,WAAOa,IAFR;AAGC,eAAW7B,QAHZ;AAIC,qBAAiBE,KAJlB;AAKC,gBAAYH,KALb,GAFD;AASC;AAAA;AAAA,OAAO,WAAU,uDAAjB;AACGiB;AADH;AATD,IADD;AAeA;;;mCAGD;AACC,OAAMc,IAAI,CAAV;;AAEA,OAAMC,eAAe7C,SAAS8C,WAAT,CAAqB,KAAKN,IAA1B,CAArB;;AAEA,OAAMO,YAAY,EAAEC,OAAQ,EAAV,EAAcC,QAAS,aAAvB,EAAlB;;AAEA,OAAM1B,aAAa,EAAnB;;AAEA,OAAM2B,SAASL,aAAaM,cAAb,EAAf,CATD,CAS8C;AAC7C5B,cAAW6B,eAAX,GAAgCF,MAAhC,SAA0CA,MAA1C;;AAEAL,gBAAad,KAAb,CAAmBsB,gBAAnB,GAAsCC,KAAKC,KAAL,CAAWL,MAAX,IAAqB,CAA3D;;AAEA;AACA;AACAL,gBAAaW,qBAAb;;AAEA;AACA;AACA,OAAI,KAAKlC,WAAT,EACA;AACCC,eAAWkC,UAAX,GACAZ,aAAad,KAAb,CAAmB2B,gBAAnB,GACAb,aAAad,KAAb,CAAmB4B,aAAnB,0BACsBZ,UAAUC,KADhC,UAC0CD,UAAUE,MADpD,SAC8DL,IAAIG,UAAUC,KAD5E,MAFA;AAIA;;AAED;AACAzB,cAAW8B,gBAAX,GAA8B,CAA9B;;AAEA,QAAKlC,QAAL,CAAc,EAAEI,yBAAiBA,UAAjB,EAAgCqC,cAAhC,CAAF,EAAd;AACA;;;0BAGD;AACC5D,YAAS8C,WAAT,CAAqB,KAAKtC,QAA1B,EAAoCK,KAApC;AACA;;;;EA3QoCf,a;;AAAjBK,Q,CAIb0D,S,GACP;AACC;AACAlB,OAAY5C,UAAU+D,MAFvB;;AAIC;AACA9C,QAAYjB,UAAUgE,IAAV,CAAeC,UAL5B;;AAOC;AACAnC,YAAY9B,UAAUgE,IAAV,CAAeC,UAR5B;;AAUC;AACAlD,WAAYf,UAAUgE,IAAV,CAAeC,UAX5B;;AAaC;AACAjD,WAAYhB,UAAUkE,IAAV,CAAeD,UAd5B;;AAgBC;AACAnD,QAAYd,UAAUgE,IAAV,CAAeC,UAjB5B;;AAmBC;AACAlC,WAAY/B,UAAUmE,IApBvB;;AAsBC;AACA;AACA;AACAjD,WAAYlB,UAAUgE,IAAV,CAAeC,UAzB5B;;AA2BC;AACAhC,YAAYjC,UAAU+D,MA5BvB;;AA8BC;AACA/B,QAAYhC,UAAUoE;AA/BvB,C;AALoBhE,Q,CAuCbiE,Y,GACP;AACCtD,WAAY,KADb;AAECE,QAAY,KAFb;AAGCC,WAAY,KAHb;AAICY,YAAY,KAJb;AAKChB,QAAY,KALb,E;eAxCoBV,Q;;;AAwSrB,IAAMiC,kCAAkC,aAAxC;AACA,IAAMK,qBAAqB,CAAC,qRAAD,CAA3B;;AAEA,IAAMC,2BACN;AACC2B,OAAiB,aADlB;AAECC,gBAAiB,OAFlB;AAGCC,iBAAiB;AAHlB,CADA;;AAOA,IAAMX,iBACN;AACCU,gBAAiB,OADlB;AAECC,iBAAiB,OAFlB;AAGCF,OAAiB;AAHlB,CADA","file":"Checkbox.js","sourcesContent":["import React, { PureComponent } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport ReactDOM from 'react-dom'\r\nimport classNames from 'classnames'\r\n\r\nimport { submitFormOnCtrlEnter } from './utility/dom'\r\n\r\n// http://tympanus.net/codrops/2013/10/15/animated-checkboxes-and-radio-buttons-with-svg/\r\n\r\nexport default class Checkbox extends PureComponent\r\n{\r\n\tstate = {}\r\n\r\n\tstatic propTypes =\r\n\t{\r\n\t\t// HTML form field \"name\"\r\n\t\tname      : PropTypes.string,\r\n\r\n\t\t// `true`/`false`\r\n\t\tvalue     : PropTypes.bool.isRequired,\r\n\r\n\t\t// Set to `true` to enable multiline label\r\n\t\tmultiline : PropTypes.bool.isRequired,\r\n\r\n\t\t// Disables the checkbox\r\n\t\tdisabled  : PropTypes.bool.isRequired,\r\n\r\n\t\t// `onChange` handler\r\n\t\tonChange  : PropTypes.func.isRequired,\r\n\r\n\t\t// When `true` autofocuses the checkbox\r\n\t\tfocus     : PropTypes.bool.isRequired,\r\n\r\n\t\t// The label (text)\r\n\t\tchildren  : PropTypes.node,\r\n\r\n\t\t// (exotic use case)\r\n\t\t// Falls back to a plain HTML input\r\n\t\t// when javascript is disabled (e.g. Tor)\r\n\t\tfallback  : PropTypes.bool.isRequired,\r\n\r\n\t\t// CSS class\r\n\t\tclassName : PropTypes.string,\r\n\r\n\t\t// CSS style object\r\n\t\tstyle     : PropTypes.object\r\n\t}\r\n\r\n\tstatic defaultProps =\r\n\t{\r\n\t\tdisabled  : false,\r\n\t\tvalue     : false,\r\n\t\tfallback  : false,\r\n\t\tmultiline : false,\r\n\t\tfocus     : false\r\n\t}\r\n\r\n\t// Client side rendering, javascript is enabled\r\n\tcomponentDidMount()\r\n\t{\r\n\t\tconst { value, fallback } = this.props\r\n\r\n\t\tif (value)\r\n\t\t{\r\n\t\t\tthis.draw_checkmark()\r\n\t\t}\r\n\r\n\t\tif (fallback)\r\n\t\t{\r\n\t\t\tthis.setState({ javascript: true })\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentWillReceiveProps(next_props)\r\n\t{\r\n\t\tif (this.props.value !== next_props.value)\r\n\t\t{\r\n\t\t\t// Allows checkmark animation from now on\r\n\t\t\tthis.was_toggled = true\r\n\t\t}\r\n\r\n\t\tif (this.props.value && !next_props.value)\r\n\t\t{\r\n\t\t\tthis.setState({ path_style: undefined })\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidUpdate(previous_props, previous_state)\r\n\t{\r\n\t\tif (this.props.value && !previous_props.value)\r\n\t\t{\r\n\t\t\tthis.draw_checkmark()\r\n\t\t}\r\n\t}\r\n\r\n\tonKeyDown = (event) =>\r\n\t{\r\n\t\tconst { onKeyDown } = this.props\r\n\r\n\t\tif (onKeyDown)\r\n\t\t{\r\n\t\t\tonKeyDown(event)\r\n\t\t}\r\n\r\n\t\tif (submitFormOnCtrlEnter(event, this.checkbox))\r\n\t\t{\r\n\t\t\treturn\r\n\t\t}\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tvalue,\r\n\t\t\terror,\r\n\t\t\tindicateInvalid,\r\n\t\t\tmultiline,\r\n\t\t\tdisabled,\r\n\t\t\tchildren,\r\n\t\t\tfallback,\r\n\t\t\tstyle,\r\n\t\t\tclassName\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\tclassName={ classNames('rrui__checkbox',\r\n\t\t\t\t{\r\n\t\t\t\t\t'rrui__rich'               : fallback,\r\n\t\t\t\t\t'rrui__checkbox--checked'  : value,\r\n\t\t\t\t\t'rrui__checkbox--invalid'  : indicateInvalid && error,\r\n\t\t\t\t\t'rrui__checkbox--disabled' : disabled\r\n\t\t\t\t},\r\n\t\t\t\tclassName) }\r\n\t\t\t\tstyle={ style }>\r\n\r\n\t\t\t\t<div\r\n\t\t\t\t\tclassName={ classNames('rrui__input',\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t'rrui__input--multiline' : multiline\r\n\t\t\t\t\t}) }>\r\n\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tclassName={ classNames('rrui__checkbox__checkbox',\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t'rrui__checkbox__checkbox--multiline' : multiline\r\n\t\t\t\t\t\t}) }>\r\n\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\tref={ ref => this.checkbox = ref }\r\n\t\t\t\t\t\t\ttype=\"checkbox\"\r\n\t\t\t\t\t\t\tchecked={ value }\r\n\t\t\t\t\t\t\tdisabled={ disabled }\r\n\t\t\t\t\t\t\tonKeyDown={ this.onKeyDown }\r\n\t\t\t\t\t\t\tonChange={ this.toggle }\r\n\t\t\t\t\t\t\tonFocus={ this.on_focus }\r\n\t\t\t\t\t\t\tonBlur={ this.on_blur }\r\n\t\t\t\t\t\t\tclassName=\"rrui__checkbox__input\"/>\r\n\r\n\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\tclassName={ classNames('rrui__checkbox__box',\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t'rrui__checkbox__box--no-label' : !children\r\n\t\t\t\t\t\t\t}) }/>\r\n\r\n\t\t\t\t\t\t<svg\r\n\t\t\t\t\t\t\tviewBox={ checkmark_svg_canvas_dimensions }\r\n\t\t\t\t\t\t\tclassName=\"rrui__checkbox__checkmark\">\r\n\t\t\t\t\t\t\t{ value ? this.render_checkmark() : null }\r\n\t\t\t\t\t\t</svg>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t{ children &&\r\n\t\t\t\t\t\t<label\r\n\t\t\t\t\t\t\tonClick={ this.toggle }\r\n\t\t\t\t\t\t\tclassName={ classNames('rrui__checkbox__label',\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t'rrui__checkbox__label--multiline' : multiline\r\n\t\t\t\t\t\t\t}) }>\r\n\t\t\t\t\t\t\t{ children }\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{ indicateInvalid && error && <div className=\"rrui__input-error\">{ error }</div> }\r\n\r\n\t\t\t\t{ fallback && !this.state.javascript && this.render_static() }\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n\trender_checkmark()\r\n\t{\r\n\t\tconst { path_style } = this.state\r\n\r\n\t\t// For a web browser\r\n\t\tif (typeof window !== 'undefined')\r\n\t\t{\r\n\t\t\treturn (\r\n\t\t\t\t<path\r\n\t\t\t\t\tref={ ref => this.path = ref }\r\n\t\t\t\t\td={ checkmark_svg_path }\r\n\t\t\t\t\tstyle={ path_style || checkmark_svg_path_style }/>\r\n\t\t\t)\r\n\t\t}\r\n\r\n\t\t// For Node.js\r\n\t\treturn (\r\n\t\t\t<path\r\n\t\t\t\td={ checkmark_svg_path }\r\n\t\t\t\tstyle={ checkmark_svg_path_style }/>\r\n\t\t)\r\n\t}\r\n\r\n\t// supports disabled javascript\r\n\trender_static()\r\n\t{\r\n\t\tconst { name, value, focus, disabled, children } = this.props\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"rrui__rich__fallback\">\r\n\t\t\t\t{/* This checkbox will be sent as either \"on\" or `undefined` */}\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype=\"checkbox\"\r\n\t\t\t\t\tname={ name }\r\n\t\t\t\t\tdisabled={ disabled }\r\n\t\t\t\t\tdefaultChecked={ value }\r\n\t\t\t\t\tautoFocus={ focus }/>\r\n\r\n\t\t\t\t<label className=\"rrui__checkbox__label rrui__checkbox__label--fallback\">\r\n\t\t\t\t\t{ children }\r\n\t\t\t\t</label>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n\tdraw_checkmark()\r\n\t{\r\n\t\tconst i = 0\r\n\r\n\t\tconst path_element = ReactDOM.findDOMNode(this.path)\r\n\r\n\t\tconst animation = { speed : .1, easing : 'ease-in-out' }\r\n\r\n\t\tconst path_style = {}\r\n\r\n\t\tconst length = path_element.getTotalLength() // in pixels\r\n\t\tpath_style.strokeDasharray = `${length} ${length}`\r\n\r\n\t\tpath_element.style.strokeDashoffset = Math.floor(length) - 1\r\n\r\n\t\t// Trigger a layout so styles are calculated & the browser\r\n\t\t// picks up the starting position before animating\r\n\t\tpath_element.getBoundingClientRect()\r\n\r\n\t\t// Define our transition\r\n\t\t// (skips the animation on the initial page render on the client side)\r\n\t\tif (this.was_toggled)\r\n\t\t{\r\n\t\t\tpath_style.transition =\r\n\t\t\tpath_element.style.WebkitTransition =\r\n\t\t\tpath_element.style.MozTransition =\r\n\t\t\t\t`stroke-dashoffset ${animation.speed}s ${animation.easing} ${i * animation.speed}s`\r\n\t\t}\r\n\r\n\t\t// Go\r\n\t\tpath_style.strokeDashoffset = 0\r\n\r\n\t\tthis.setState({ path_style: { ...path_style, ...svg_path_style } })\r\n\t}\r\n\r\n\tfocus()\r\n\t{\r\n\t\tReactDOM.findDOMNode(this.checkbox).focus()\r\n\t}\r\n\r\n\ttoggle = (event) =>\r\n\t{\r\n\t\t// If a link was clicked - don't treat it as a checkbox label click.\r\n\t\t// (is used for things like \"✓ Read and accepted the <a>licence agreement</a>\")\r\n\t\tif (event.target.tagName.toLowerCase() === 'a')\r\n\t\t{\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tthis.focus()\r\n\r\n\t\tconst { disabled, onChange, value } = this.props\r\n\r\n\t\tif (disabled)\r\n\t\t{\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// if (value)\r\n\t\t// {\r\n\t\t// \tthis.setState({ path_style: undefined })\r\n\t\t// }\r\n\r\n\t\tonChange(!value)\r\n\t}\r\n}\r\n\r\nconst checkmark_svg_canvas_dimensions = '0 0 100 100'\r\nconst checkmark_svg_path = ['M16.667,62.167c3.109,5.55,7.217,10.591,10.926,15.75 c2.614,3.636,5.149,7.519,8.161,10.853c-0.046-0.051,1.959,2.414,2.692,2.343c0.895-0.088,6.958-8.511,6.014-7.3 c5.997-7.695,11.68-15.463,16.931-23.696c6.393-10.025,12.235-20.373,18.104-30.707C82.004,24.988,84.802,20.601,87,16']\r\n\r\nconst checkmark_svg_path_style =\r\n{\r\n\tfill           : 'transparent',\r\n\tstrokeLinecap  : 'round',\r\n\tstrokeLinejoin : 'round'\r\n}\r\n\r\nconst svg_path_style =\r\n{\r\n\tstrokeLinecap  : 'round',\r\n\tstrokeLinejoin : 'round',\r\n\tfill           : 'none'\r\n}"]}