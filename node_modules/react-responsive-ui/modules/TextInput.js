var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent, createElement } from 'react';
import PropTypes from 'prop-types';
import ReactDOM from 'react-dom';
import classNames from 'classnames';
import throttle from 'lodash/throttle';

import { submitFormOnCtrlEnter } from './utility/dom';
import { get_modular_grid_unit } from './utility/grid';

var TextInput = function (_PureComponent) {
	_inherits(TextInput, _PureComponent);

	function TextInput() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, TextInput);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TextInput.__proto__ || Object.getPrototypeOf(TextInput)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this.autoresize = function (event) {
			var measurements = _this.measurements();
			var element = event ? event.target : ReactDOM.findDOMNode(_this.input);

			element.style.height = 0;

			// `element.scrollHeight` is always an integer
			// so it doesn't need rounding (e.g. `em`s).
			var height = element.scrollHeight + measurements.extra_height;
			height = Math.max(height, measurements.initial_height);

			if (get_modular_grid_unit() && height % get_modular_grid_unit()) {
				height = Math.ceil(height / get_modular_grid_unit()) * get_modular_grid_unit();
			}

			// For some reason Chrome on Windows 10
			// requires an extra pixel been added
			// to avoid showing vertical scrollbar.
			// (Jan 11, 2018)
			if (height > measurements.initial_height) {
				height += 1;
			}

			element.style.height = height + 'px';
		}, _this.on_window_resize = throttle(function (event) {
			return _this.autoresize();
		}, 100), _this.on_change = function (event) {
			// Extract `value` from the argument
			// of this `onChange` listener
			// (for convenience)

			var value = event;

			if (event.target !== undefined) {
				value = event.target.value;
			}

			// Call the parent `onChange` handler
			// with the `value` as an argument
			// (for convenience)

			var _this$props = _this.props,
			    onChange = _this$props.onChange,
			    previous_value = _this$props.value;

			// Call `onChange` only if `value` did actually change

			if (value !== previous_value) {
				onChange(value);
			}
		}, _this.onKeyDown = function (event) {
			var onKeyDown = _this.props.onKeyDown;


			if (onKeyDown) {
				onKeyDown(event);
			}

			if (submitFormOnCtrlEnter(event, _this.input)) {
				return;
			}
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}

	_createClass(TextInput, [{
		key: 'componentDidMount',


		// Client side rendering, javascript is enabled
		value: function componentDidMount() {
			var _props = this.props,
			    multiline = _props.multiline,
			    autoresize = _props.autoresize,
			    fallback = _props.fallback,
			    value = _props.value;

			// Doing `this.measure()` here now
			// because `<textarea/>` should autoresize
			// in case its `value` is set up front.
			// // Not doing `this.measure()` here because
			// // that resulted in weird `<textarea/>` height mismatch.
			// // Measuring the height of `<textarea/>` during
			// // the first `this.measurements()` call instead.

			if (multiline && autoresize && value) {
				this.autoresize();
			}

			if (multiline && autoresize) {
				window.addEventListener('resize', this.on_window_resize);
			}

			if (fallback) {
				this.setState({ javascript: true });
			}
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			var _props2 = this.props,
			    multiline = _props2.multiline,
			    autoresize = _props2.autoresize;


			if (multiline && autoresize) {
				window.removeEventListener('resize', this.on_window_resize);
			}
		}
	}, {
		key: 'render',
		value: function render() {
			var _props3 = this.props,
			    id = _props3.id,
			    name = _props3.name,
			    value = _props3.value,
			    placeholder = _props3.placeholder,
			    label = _props3.label,
			    labelStyle = _props3.labelStyle,
			    multiline = _props3.multiline,
			    fallback = _props3.fallback,
			    disabled = _props3.disabled,
			    required = _props3.required,
			    floatingLabel = _props3.floatingLabel,
			    style = _props3.style,
			    className = _props3.className;


			var label_floats = placeholder === undefined && floatingLabel;

			return React.createElement(
				'div',
				{
					style: style,
					className: classNames('rrui__text-input', {
						'rrui__rich': fallback
					}, className) },
				React.createElement(
					'div',
					{
						className: classNames('rrui__input', {
							'rrui__input--multiline': multiline
						}) },
					this.render_input({ name: false }),
					label && React.createElement(
						'label',
						{
							htmlFor: id,
							className: classNames('rrui__input-label', {
								// CSS selector performance optimization
								'rrui__input-label--invalid': this.should_indicate_invalid(),
								'rrui__input-label--floating': label_floats,
								'rrui__input-label--required': required && this.is_empty(),
								'rrui__text-input__label--placeholder': label_floats && this.is_empty()
							}),
							style: labelStyle },
						label
					)
				),
				this.should_indicate_invalid() && this.render_error_message(),
				fallback && !this.state.javascript && this.render_static()
			);
		}
	}, {
		key: 'render_input',
		value: function render_input() {
			var _this2 = this;

			var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
			var placeholder = options.placeholder,
			    ref = options.ref,
			    name = options.name;
			var _props4 = this.props,
			    value = _props4.value,
			    multiline = _props4.multiline,
			    focus = _props4.focus,
			    onChange = _props4.onChange,
			    disabled = _props4.disabled,
			    inputStyle = _props4.inputStyle,
			    rows = _props4.rows,
			    cols = _props4.cols,
			    tabIndex = _props4.tabIndex,
			    autoresize = _props4.autoresize,
			    input = _props4.input,
			    inputComponent = _props4.inputComponent,
			    id = _props4.id,
			    onFocus = _props4.onFocus,
			    onBlur = _props4.onBlur,
			    autoComplete = _props4.autoComplete;


			var input_style = inputStyle;

			if (multiline && autoresize) {
				input_style = _extends({
					resize: 'none'
				}, inputStyle);
			}

			var properties = {
				id: id,
				name: name === false ? undefined : this.props.name,
				ref: ref === false ? undefined : function (ref) {
					return _this2.input = ref;
				},
				value: value === undefined || value === null ? '' : value,
				placeholder: placeholder || this.props.placeholder,
				onChange: this.on_change,
				onKeyDown: this.onKeyDown,
				onFocus: onFocus,
				onBlur: onBlur,
				autoComplete: autoComplete,
				disabled: disabled,
				className: classNames('rrui__input-element', 'rrui__input-field', {
					// CSS selector performance optimization
					'rrui__input-field--invalid': this.should_indicate_invalid(),
					'rrui__input-field--disabled': disabled,
					'rrui__input-field--multiline': multiline
				}),
				style: input_style,
				autoFocus: focus,
				tabIndex: tabIndex

				// In case of `multiline` set to `true`
				// this is gonna be a `<textarea/>`
			};if (multiline) {
				// "keyup" is required for IE to properly reset height when deleting text
				return React.createElement('textarea', _extends({
					rows: rows,
					cols: cols,
					onInput: autoresize ? this.autoresize : undefined,
					onKeyUp: autoresize ? this.autoresize : undefined
				}, properties));
			}

			// Add `<input/>` `type` to properties
			properties.type = this.get_input_type();

			// If a custom `input` component was passed then use it.
			// Otherwise use a simple `<input/>`.
			return createElement(this.getInputComponent(), properties);
		}
	}, {
		key: 'render_error_message',
		value: function render_error_message() {
			var error = this.props.error;


			return React.createElement(
				'div',
				{ className: 'rrui__input-error' },
				error
			);
		}

		// Fallback in case javascript is disabled (no animated <label/>)

	}, {
		key: 'render_static',
		value: function render_static() {
			var label = this.props.label;


			return React.createElement(
				'div',
				{ className: 'rrui__rich__fallback' },
				this.render_input({ placeholder: label, ref: false }),
				this.should_indicate_invalid() && this.render_error_message()
			);
		}
	}, {
		key: 'getInputComponent',
		value: function getInputComponent() {
			var _props5 = this.props,
			    input = _props5.input,
			    inputComponent = _props5.inputComponent;


			return input || inputComponent || 'input';
		}

		// "text", "email", "password", etc

	}, {
		key: 'get_input_type',
		value: function get_input_type() {
			var _props6 = this.props,
			    type = _props6.type,
			    email = _props6.email,
			    password = _props6.password;


			if (email) {
				return 'email';
			}

			if (password) {
				return 'password';
			}

			return type;
		}

		// Whether the input is empty

	}, {
		key: 'is_empty',
		value: function is_empty() {
			var value = this.props.value;

			// `0` is not an empty value

			if (typeof value === 'number' && value === 0) {
				return false;
			}

			// An empty string, `undefined`, `null` –
			// all those are an empty value.
			if (!value) {
				return true;
			}

			// Whitespace string is also considered empty
			if (typeof value === 'string' && !value.trim()) {
				return true;
			}

			// Not empty
			return false;
		}

		// Whether should indicate that the input value is invalid

	}, {
		key: 'should_indicate_invalid',
		value: function should_indicate_invalid() {
			var _props7 = this.props,
			    indicateInvalid = _props7.indicateInvalid,
			    error = _props7.error;


			return indicateInvalid && error;
		}

		// The underlying `input` component
		// can pass both `event`s and `value`s
		// to this parent `onChange` listener.

	}, {
		key: 'focus',
		value: function focus() {
			// For simple DOM nodes like `<input/>`
			// just focus on them.
			if (typeof this.getInputComponent() === 'string') {
				return ReactDOM.findDOMNode(this.input).focus();
			}

			// For custom components call `.focus()` on them
			// (if available)
			return this.input.focus && this.input.focus();
		}
	}, {
		key: 'measure',
		value: function measure() {
			return autoresize_measure(ReactDOM.findDOMNode(this.input));
		}
	}, {
		key: 'measurements',
		value: function measurements() {
			var measurements = this.state.autoresize;

			// If it's the first time accessing measurements,
			// or if the textarea was initially hidden
			// (like `display: none` for a mobile-oriented responsive design)
			// then make the initial measurements now.
			if (!measurements || !measurements.initial_height) {
				measurements = this.measure();

				// If the `<textarea/>` is not hidden (e.g. via `display: none`)
				// then keep its initial (minimum) height
				// so that it doesn't shrink below this value
				if (measurements.initial_height) {
					this.setState({ autoresize: measurements });
				}
			}

			return measurements;
		}
	}]);

	return TextInput;
}(PureComponent);

// <textarea/> autoresize (without ghost elements)
// https://github.com/javierjulio/textarea-autosize/blob/master/src/jquery.textarea_autosize.js


TextInput.propTypes = {
	// Text field label
	label: PropTypes.string,

	// HTML form input `name` attribute
	name: PropTypes.string,

	// Text field value
	value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

	// Is called when the `value` is edited
	onChange: PropTypes.func.isRequired,

	// Disables the text field
	disabled: PropTypes.bool,

	// Renders an error message below the `<input/>`
	error: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),

	// If this flag is `true` then the `error` is shown.
	// If this flag is `false` then the `error` is not shown (even if passed).
	indicateInvalid: PropTypes.bool,

	// Set to `true` to mark the field as required
	required: PropTypes.bool.isRequired,

	// `<input/>` placeholder
	placeholder: PropTypes.string,

	// Set to `false` to prevent the `<label/>` from floating
	floatingLabel: PropTypes.bool.isRequired,

	// `<textarea/>` instead of an `<input type="text"/>`
	multiline: PropTypes.bool,

	// Sets HTML input `type` attribute to `email`
	email: PropTypes.bool,

	// Sets HTML input `type` attribute to `password`
	password: PropTypes.bool,

	// A manually specified `type` attribute
	type: PropTypes.string.isRequired,

	// Whether `<textarea/>` should autoresize itself
	// (is `true` by default)
	autoresize: PropTypes.bool.isRequired,

	// Autofocuses the input field
	focus: PropTypes.bool,

	// HTML `tabindex` attribute
	tabIndex: PropTypes.number,

	// `<textarea/>` `rows` attribute (row count, i.e. height)
	rows: PropTypes.number,

	// `<textarea/>` `cols` attribute (column count, i.e. width)
	cols: PropTypes.number,

	// A custom `input` component can be passed
	input: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),
	inputComponent: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),

	// (exotic use case)
	// Falls back to a plain HTML input
	// when javascript is disabled (e.g. Tor)
	fallback: PropTypes.bool.isRequired,

	// Is called when the input is focused
	onFocus: PropTypes.func,

	// `onKeyDown` event handler
	onKeyDown: PropTypes.func,

	// Is called when the input is blurred
	onBlur: PropTypes.func,

	// CSS style object
	style: PropTypes.object,

	// CSS name
	className: PropTypes.string,

	// CSS style object for `<input/>`
	inputStyle: PropTypes.object,

	// CSS style object for the label
	labelStyle: PropTypes.object
};
TextInput.defaultProps = {
	// HTML input `type` attribute
	type: 'text',

	// `<textarea/>` should autoresize itself
	autoresize: true,

	// Set to `false` to prevent the `<label/>` from floating
	floatingLabel: true,

	// Javascriptless users support (e.g. Tor)
	fallback: false,

	// Set to `true` to mark the field as required
	required: false };
export default TextInput;
function autoresize_measure(element) {
	var style = window.getComputedStyle(element);

	// Borders extra height, because `.scrollHeight` doesn't include borders.
	var extra_height = parseInt(style.borderTopWidth) + parseInt(style.borderBottomWidth);

	// `<textarea/>`'s height is a float when using `em`, `rem`, `pt`, etc.
	var non_rounded_initial_height = element.getBoundingClientRect().height;
	var initial_height = Math.ceil(non_rounded_initial_height);

	// Round the height of `<textarea/>` so that it doesn't jump
	// when autoresizing while typing for the first time.
	if (initial_height !== non_rounded_initial_height) {
		element.style.height = initial_height + 'px';
	}

	return { extra_height: extra_height, initial_height: initial_height };
}
//# sourceMappingURL=TextInput.js.map