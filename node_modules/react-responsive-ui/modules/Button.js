var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import ReactDOM from 'react-dom';
import classNames from 'classnames';

import ActivityIndicator from './ActivityIndicator';

var Button = function (_PureComponent) {
	_inherits(Button, _PureComponent);

	function Button() {
		_classCallCheck(this, Button);

		var _this = _possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).call(this));

		_this.state = {};


		_this.link_on_click = _this.link_on_click.bind(_this);
		_this.button_on_click = _this.button_on_click.bind(_this);
		return _this;
	}

	_createClass(Button, [{
		key: 'render',
		value: function render() {
			var _props = this.props,
			    disabled = _props.disabled,
			    busy = _props.busy,
			    wait = _props.wait,
			    submit = _props.submit,
			    title = _props.title,
			    stretch = _props.stretch,
			    style = _props.style,
			    className = _props.className;


			return React.createElement(
				'div',
				{
					className: classNames('rrui__input', 'rrui__button', {
						'rrui__button--busy': busy || wait || this.state.wait,
						'rrui__button--disabled': disabled,
						'rrui__button--stretch': stretch
					}, className),
					style: style },
				React.createElement(ActivityIndicator, {
					className: classNames('rrui__button__activity-indicator', {
						// CSS selector performance optimization
						'rrui__button__activity-indicator--busy': busy || wait || this.state.wait
					}) }),
				this.render_button()
			);
		}
	}, {
		key: 'render_button',
		value: function render_button() {
			var _this2 = this;

			var _props2 = this.props,
			    link = _props2.link,
			    linkDownload = _props2.linkDownload,
			    title = _props2.title,
			    busy = _props2.busy,
			    wait = _props2.wait,
			    disabled = _props2.disabled,
			    submit = _props2.submit,
			    buttonStyle = _props2.buttonStyle,
			    children = _props2.children;


			var className = classNames('rrui__button-reset', 'rrui__button__button', {
				'rrui__button__button--link': link,
				// CSS selector performance optimization
				'rrui__button__button--busy': busy || wait || this.state.wait,
				'rrui__button__button--disabled': disabled
			});

			var properties = {
				ref: function ref(_ref) {
					return _this2.button = _ref;
				},
				title: title,
				className: className,
				style: buttonStyle
			};

			var contents = React.createElement(
				'div',
				{
					className: classNames('rrui__button__contents', {
						// CSS selector performance optimization
						'rrui__button__contents--busy': busy || wait || this.state.wait
					}) },
				children
			);

			if (link) {
				return React.createElement(
					'a',
					_extends({
						href: link,
						download: linkDownload,
						onClick: this.link_on_click
					}, properties),
					contents
				);
			}

			return React.createElement(
				'button',
				_extends({
					type: submit ? 'submit' : 'button',
					disabled: busy || wait || this.state.wait || disabled,
					onClick: this.button_on_click
				}, properties),
				contents
			);
		}
	}, {
		key: 'focus',
		value: function focus() {
			ReactDOM.findDOMNode(this.button).focus();
		}
	}, {
		key: 'link_on_click',
		value: function link_on_click(event) {
			var _props3 = this.props,
			    busy = _props3.busy,
			    wait = _props3.wait,
			    disabled = _props3.disabled,
			    action = _props3.action;

			// Only handle left mouse button clicks
			// ignoring those ones with a modifier key pressed

			if (event.button !== 0 || event.shiftKey || event.altKey || event.ctrlKey || event.metaKey) {
				return;
			}

			if (busy || wait || this.state.wait || disabled) {
				return;
			}

			// Could be just a "submit" button without having any `action`.
			// Could also be just a `link` button.
			// Therefore "preventing default" only if `action` is set:
			// for example, if `link` is set and no `action`
			// then it should proceed with navigating to the `link`.
			// And if `link` is set and `action` is specified too
			// then it will prevent it from navigating to the `link`.
			if (action) {
				event.preventDefault();
				action();
			}
		}
	}, {
		key: 'button_on_click',
		value: function button_on_click(event) {
			var _this3 = this;

			var action = this.props.action;

			// Could be just a "submit" button

			if (action) {
				var result = action();

				if (result && typeof result.then === 'function') {
					this.setState({ wait: true });
					result.then(function () {
						return _this3.setState({ wait: false });
					}, function () {
						return _this3.setState({ wait: false });
					});
				}
			}
		}
	}]);

	return Button;
}(PureComponent);

Button.propTypes = {
	// onClick handler
	action: PropTypes.func,

	// If `busy` is `true` then the button
	// will be disabled and a spinner will be shown.
	busy: PropTypes.bool,

	// `wait` is an alias for `busy`.
	wait: PropTypes.bool,

	// Disables the button
	disabled: PropTypes.bool,

	// When `true`, the button will submit an enclosing form.
	submit: PropTypes.bool,

	// If `link` is set, then the button is gonna be an <a/> tag.
	link: PropTypes.string,

	// `<a download="..."/>` HTML attribute
	linkDownload: PropTypes.string,

	// HTML `title` attribute
	title: PropTypes.string,

	// Set to `true` to stretch the button to full width
	stretch: PropTypes.bool.isRequired,

	// CSS class name
	className: PropTypes.string,

	// CSS style object for the button container
	style: PropTypes.object,

	// CSS style object for the button itself
	buttonStyle: PropTypes.object
};
Button.defaultProps = {
	// Set to `true` to stretch the button to full width
	stretch: false
};
export default Button;
//# sourceMappingURL=Button.js.map