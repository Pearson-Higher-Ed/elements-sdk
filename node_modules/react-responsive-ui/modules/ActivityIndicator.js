var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

// http://codepen.io/jczimm/pen/vEBpoL

import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';

var radius = 20;
var padding = 0.25; // in `radius`es

var svg_circe_center = radius * (1 + padding);
var svg_canvas_dimensions = '0 0 ' + svg_circe_center * 2 + ' ' + svg_circe_center * 2;
// Whatever it is
// https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-miterlimit
var svg_stroke_miter_limit = radius / 2;

export default function ActivityIndicator(props) {
	var className = props.className;


	return React.createElement(
		'div',
		_extends({}, props, {
			className: classNames('rrui__activity-indicator', className) }),
		React.createElement(
			'svg',
			{
				viewBox: svg_canvas_dimensions,
				className: 'rrui__activity-indicator-circle-container' },
			React.createElement('circle', {
				className: 'rrui__activity-indicator-circle',
				cx: svg_circe_center,
				cy: svg_circe_center,
				r: radius,
				fill: 'none',
				strokeWidth: radius * 0.125,
				strokeMiterlimit: svg_stroke_miter_limit })
		)
	);
}

ActivityIndicator.propTypes = {
	// CSS class
	className: PropTypes.string,

	// CSS style object
	style: PropTypes.object
};
//# sourceMappingURL=ActivityIndicator.js.map