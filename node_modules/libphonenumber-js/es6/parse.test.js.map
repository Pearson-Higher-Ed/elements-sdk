{"version":3,"sources":["../source/parse.test.js"],"names":["chai","expect","should","metadata","parser","parse","parameters","push","apply","describe","it","deep","equal","undefined","country","default","phone","thrower","throw","ext"],"mappings":"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","file":"parse.test.js","sourcesContent":["import chai, { expect } from 'chai'\r\nchai.should()\r\n\r\nimport metadata from '../metadata.min'\r\nimport parser from '../source/parse'\r\n\r\nfunction parse(...parameters)\r\n{\r\n\tparameters.push(metadata)\r\n\treturn parser.apply(this, parameters)\r\n}\r\n\r\ndescribe('parse', () =>\r\n{\r\n\tit('should not parse invalid phone numbers', function()\r\n\t{\r\n\t\tparse('+7 (800) 55-35-35').should.deep.equal({})\r\n\t\tparse('+7 (800) 55-35-35', undefined).should.deep.equal({})\r\n\t\tparse('+7 (800) 55-35-35', 'US').should.deep.equal({})\r\n\t\tparse('(800) 55 35 35', { country: { default: 'RU' } }).should.deep.equal({})\r\n\t\tparse('+1 187 215 5230', 'US').should.deep.equal({})\r\n\t\tparse('+1 1877 215 5230', 'US').should.deep.equal({})\r\n\t})\r\n\r\n\tit('should parse valid phone numbers', function()\r\n\t{\r\n\t\t// Instant loans\r\n\t\t// https://www.youtube.com/watch?v=6e1pMrYH5jI\r\n\t\t//\r\n\t\t// Restrict to RU\r\n\t\tparse('8 (800) 555 35 35', 'RU').should.deep.equal({ country: 'RU', phone: '8005553535' })\r\n\t\t// International format\r\n\t\tparse('+7 (800) 555-35-35').should.deep.equal({ country: 'RU', phone: '8005553535' })\r\n\t\t// Restrict to US, but not a US country phone code supplied\r\n\t\tparse('+7 (800) 555-35-35', 'US').should.deep.equal({})\r\n\t\t// Restrict to RU\r\n\t\tparse('(800) 555 35 35', 'RU').should.deep.equal({ country: 'RU', phone: '8005553535' })\r\n\t\t// Default to RU\r\n\t\tparse('8 (800) 555 35 35', { country: { default: 'RU' } }).should.deep.equal({ country: 'RU', phone: '8005553535' })\r\n\r\n\t\t// Gangster partyline\r\n\t\tparse('+1-213-373-4253').should.deep.equal({ country: 'US', phone: '2133734253' })\r\n\r\n\t\t// Switzerland (just in case)\r\n\t\tparse('044 668 18 00', 'CH').should.deep.equal({ country: 'CH', phone: '446681800' })\r\n\r\n\t\t// China, Beijing\r\n\t\tparse('010-852644821', 'CN').should.deep.equal({ country: 'CN', phone: '10852644821' })\r\n\r\n\t\t// France\r\n\t\tparse('+33169454850').should.deep.equal({ country: 'FR', phone: '169454850' })\r\n\r\n\t\t// UK (Jersey)\r\n\t\tparse('+44 7700 300000').should.deep.equal({ country: 'JE', phone: '7700300000' })\r\n\r\n\t\t// KZ\r\n\t\tparse('+7 702 211 1111').should.deep.equal({ country: 'KZ', phone: '7022111111' })\r\n\r\n\t\t// Brazil\r\n\t\tparse('11987654321', 'BR').should.deep.equal({ country: 'BR', phone: '11987654321' })\r\n\t})\r\n\r\n\tit('should parse non-European digits', function()\r\n\t{\r\n\t\tparse('+١٢١٢٢٣٢٣٢٣٢').should.deep.equal({ country: 'US', phone: '2122323232' })\r\n\t})\r\n\r\n\tit('should work in edge cases', function()\r\n\t{\r\n\t\tlet thrower\r\n\r\n\t\t// No input\r\n\t\tparse('').should.deep.equal({})\r\n\r\n\t\t// No country phone code\r\n\t\tparse('+').should.deep.equal({})\r\n\r\n\t\t// No country at all (non international number and no explicit country code)\r\n\t\tparse('123').should.deep.equal({})\r\n\r\n\t\t// No country metadata for this `require` country code\r\n\t\tthrower = () => parse('123', 'ZZ')\r\n\t\tthrower.should.throw('Unknown country code')\r\n\r\n\t\t// No country metadata for this `default` country code\r\n\t\tthrower = () => parse('123', { country: { default: 'ZZ' }})\r\n\t\tthrower.should.throw('Unknown country code')\r\n\r\n\t\t// Invalid country phone code\r\n\t\tparse('+210').should.deep.equal({})\r\n\r\n\t\t// Country phone code beginning with a '0'\r\n\t\tparse('+0123').should.deep.equal({})\r\n\r\n\t\t// Barbados NANPA phone number\r\n\t\tparse('+12460000000').should.deep.equal({ country: 'BB', phone: '2460000000' })\r\n\r\n\t\t// A case when country (restricted to) is not equal\r\n\t\t// to the one parsed out of an international number.\r\n\t\tparse('+1-213-373-4253', 'RU').should.deep.equal({})\r\n\r\n\t\t// National (significant) number too short\r\n\t\tparse('2', 'US').should.deep.equal({})\r\n\r\n\t\t// National (significant) number too long\r\n\t\tparse('222222222222222222', 'US').should.deep.equal({})\r\n\r\n\t\t// No `national_prefix_for_parsing`\r\n\t\tparse('41111', 'AC').should.deep.equal({ country: 'AC', phone: '41111'})\r\n\r\n\t\t// National prefix transform rule (Mexico).\r\n\t\t// Local cell phone from a land line: 044 -> 1.\r\n\t\tparse('0445511111111', 'MX').should.deep.equal({ country: 'MX', phone: '15511111111' })\r\n\r\n\t\t// No arguments\r\n\t\tparse(undefined).should.deep.equal({})\r\n\r\n\t\t// No metadata\r\n\t\tthrower = () => parser('')\r\n\t\tthrower.should.throw('Metadata')\r\n\r\n\t\t// No metadata\r\n\t\tthrower = () => parser('', {})\r\n\t\tthrower.should.throw('Metadata')\r\n\r\n\t\t// Numerical `value`\r\n\t\tparse(2141111111, 'US').should.deep.equal({ country: 'US', phone: '2141111111'})\r\n\t})\r\n\r\n\tit('should parse phone number extensions', function()\r\n\t{\r\n\t\t// \"ext\"\r\n\t\tparse('2134567890 ext 123', 'US').should.deep.equal\r\n\t\t({\r\n\t\t\tcountry : 'US',\r\n\t\t\tphone   : '2134567890',\r\n\t\t\text     : '123'\r\n\t\t})\r\n\r\n\t\t// \"ext.\"\r\n\t\tparse('+12134567890 ext. 12345', 'US').should.deep.equal\r\n\t\t({\r\n\t\t\tcountry : 'US',\r\n\t\t\tphone   : '2134567890',\r\n\t\t\text     : '12345'\r\n\t\t})\r\n\r\n\t\t// \"#\"\r\n\t\tparse('+12134567890#1234').should.deep.equal\r\n\t\t({\r\n\t\t\tcountry : 'US',\r\n\t\t\tphone   : '2134567890',\r\n\t\t\text     : '1234'\r\n\t\t})\r\n\r\n\t\t// \"x\"\r\n\t\tparse('+78005553535 x1234').should.deep.equal\r\n\t\t({\r\n\t\t\tcountry : 'RU',\r\n\t\t\tphone   : '8005553535',\r\n\t\t\text     : '1234'\r\n\t\t})\r\n\r\n\t\t// Not a valid extension\r\n\t\tparse('2134567890 ext. 1234567890', 'US').should.deep.equal({})\r\n\t})\r\n\r\n\tit('should parse RFC 3966 phone numbers', function()\r\n\t{\r\n\t\tparse('tel:+78005553535;ext:123').should.deep.equal\r\n\t\t({\r\n\t\t\tcountry : 'RU',\r\n\t\t\tphone   : '8005553535',\r\n\t\t\text     : '123'\r\n\t\t})\r\n\r\n\t\t// With phone context\r\n\t\tparse('tel:8005553535;ext:123;phone-context:+7').should.deep.equal\r\n\t\t({\r\n\t\t\tcountry : 'RU',\r\n\t\t\tphone   : '8005553535',\r\n\t\t\text     : '123'\r\n\t\t})\r\n\r\n\t\t// Domain contexts are ignored\r\n\t\tparse('tel:8005553535;ext:123;phone-context:www.leningrad.spb.ru', 'RU').should.deep.equal\r\n\t\t({\r\n\t\t\tcountry : 'RU',\r\n\t\t\tphone   : '8005553535',\r\n\t\t\text     : '123'\r\n\t\t})\r\n\r\n\t\t// // Missing `tel:` prefix is invalid as per the specs.\r\n\t\t// // http://www.cdapro.com/know/26883\r\n\t\t// parse('+78005553535;phone-context=').should.deep.equal\r\n\t\t// ({\r\n\t\t// \tcountry: 'RU',\r\n\t\t// \tphone: '8005553535'\r\n\t\t// })\r\n\t})\r\n})\r\n"]}