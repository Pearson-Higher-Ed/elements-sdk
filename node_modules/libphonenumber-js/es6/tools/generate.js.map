{"version":3,"sources":["../../source/tools/generate.js"],"names":["parseString","Promise","DIGIT_PLACEHOLDER","phone_number_types","input","included_countries","extended","included_phone_number_types","type","indexOf","reject","promisify","then","xml","country_phone_code_to_countries","countries","territory","country_code","$","id","has","country","phone_code","countryCode","leading_digits","leadingDigits","national_number_pattern","generalDesc","nationalNumberPattern","replace","national_prefix","nationalPrefix","national_prefix_for_parsing","nationalPrefixForParsing","undefined","national_prefix_transform_rule","nationalPrefixTransformRule","national_prefix_formatting_rule","nationalPrefixFormattingRule","national_prefix_is_optional_when_formatting","nationalPrefixOptionalWhenFormatting","Boolean","types","get_phone_number_types","examples","get_phone_number_examples","Error","availableFormats","formats","numberFormat","map","number_format","pattern","leading_digits_patterns","format","international_format","intlFormat","filter","mainCountryForCode","unshift","push","phoneNumberMetadata","territories","main_country_for_region_code","main_country_for_region","country_phone_code","country_codes","all_types_required","length","key","forEach","rule","reduce","output","camel_cased_type","underscore_to_camel_case","example","exampleNumber","string","match","toUpperCase"],"mappings":"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","file":"generate.js","sourcesContent":["import { parseString } from 'xml2js'\r\nimport Promise from 'bluebird'\r\n\r\nimport { DIGIT_PLACEHOLDER } from '../AsYouType'\r\n\r\nconst phone_number_types =\r\n[\r\n\t'premium_rate',\r\n\t'toll_free',\r\n\t'shared_cost',\r\n\t'voip',\r\n\t'personal_number',\r\n\t'pager',\r\n\t'uan',\r\n\t'voice_mail',\r\n\t'fixed_line',\r\n\t'mobile'\r\n]\r\n\r\n// Excessive fields from \"PhoneNumberMetadata.xml\"\r\n// aren't included to reduce code complexity and size:\r\n//\r\n// * `<references>` — a link to ITU (International Telecommunication Union)\r\n//                    document describing phone numbering plan for a country\r\n//\r\n// * `<noInternationalDialling>` — who needs to input non-internationally-dialable phones\r\n//\r\n// * `<areaCodeOptional>` — we aren't in the XXth century,\r\n//                          it's a globalized world, so write your\r\n//                          phone numbers with area codes.\r\n//\r\n// * `<fixedLine>`, `<mobile>`, `<pager>`,\r\n//   `<tollFree>`, `<premiumRate>`,\r\n//   `<sharedCost>`, `<personalNumber>`,\r\n//   `<voip>`, `<uan>`, `<voicemail>` — who needs that in the XXIst century.\r\n//                                      just go mobile and stop talking nonsense.\r\n//\r\n// * `internationalPrefix`,\r\n//   `preferredInternationalPrefix` — who needs to parse (or format) those weird\r\n//                                    \"internationally dialed\" phone numbers\r\n//                                    like \"011 ...\" in the USA.\r\n//                                    this isn't XXth century, just use mobile phones.\r\n//\r\n// * `preferredExtnPrefix` — screw phone number extensions\r\n//\r\n// * `leadingZeroPossible` — (aka \"italian leading zero\")\r\n//                           who needs to parse a phone number into an integer.\r\n//                           just keep it as a string.\r\n//\r\n// * `carrierCodeFormattingRule` — only used in Brazil and Colombia\r\n//                                 when dialing from within those countries\r\n//                                 from mobile phones to fixed line phone numbers.\r\n//                                 i guess brazilians and colombians\r\n//                                 already know when to add those carrier codes\r\n//                                 by themselves (and when not to add them)\r\n//\r\n// * `mobileNumberPortableRegion` — is only used to disable phone number type detection\r\n//\r\n// * `<possibleLengths>` — is a redundant field to speed up testing of\r\n//                         whether a phone number format can be used to format\r\n//                         a particular national (significant) phone number.\r\n//\r\n// `libphonenumber/BuildMetadataFromXml.java` was used as a reference.\r\n// https://github.com/googlei18n/libphonenumber/blob/master/tools/java/common/src/com/google/i18n/phonenumbers/BuildMetadataFromXml.java\r\n//\r\n// There are three Xml metadata files in Google's `libphonenumber`:\r\n//\r\n//  * PhoneNumberMetadata.xml — core data, used both for parse/format and \"as you type\"\r\n//\r\n//  * PhoneNumberAlternateFormats.xml — alternative phone number formats.\r\n//                                      is presumably used for parsing phone numbers\r\n//                                      written in \"alternative\" formats.\r\n//                                      is not used by \"as you type\"\r\n//                                      presumably because of formats ambiguity\r\n//                                      when combined with the core data.\r\n//                                      this metadata is not used in this library\r\n//                                      as there's no clear description on what to do with it\r\n//                                      and how it works in the original `libphonenumber` code.\r\n//\r\n//  * ShortNumberMetadata.xml — emergency numbers, etc. not used in this library.\r\n//\r\n// @returns\r\n//\r\n// {\r\n// \tcountry_phone_code_to_countries:\r\n// \t{\r\n// \t\t'7': ['RU', 'KZ', ...],\r\n// \t\t...\r\n// \t},\r\n// \tcountries:\r\n// \t{\r\n// \t\tRU:\r\n// \t\t{\r\n// \t\t\tphone_code: \"7\",\r\n// \t\t\tnational_number_pattern: \"[347-9]\\\\d{9}\",\r\n// \t\t\tnational_prefix: \"8\",\r\n// \t\t\tnational_prefix_formatting_rule: \"8 ($1)\",\r\n// \t\t\tnational_prefix_is_optional_when_formatting: true,\r\n// \t\t\ttypes:\r\n// \t\t\t{\r\n// \t\t\t\tfixed_line: \"(?:3(?:0[12]|4[1-35-79]|5[1-3]|65|8[1-58]|9[0145])|4(?:01|1[1356]|2[13467]|7[1-5]|8[1-7]|9[1-689])|8(?:1[1-8]|2[01]|3[13-6]|4[0-8]|5[15]|6[1-35-79]|7[1-37-9]))\\\\d{7}\",\r\n// \t\t\t\tmobile: \"9\\\\d{9}\",\r\n// \t\t\t\t...\r\n// \t\t\t},\r\n// \t\t\texamples:\r\n// \t\t\t{\r\n// \t\t\t\tfixed_line: '4955553535',\r\n// \t\t\t\tmobile: '9991234567',\r\n// \t\t\t\t...\r\n// \t\t\t},\r\n// \t\t\tformats:\r\n// \t\t\t[{\r\n// \t\t\t\tpattern: \"([3489]\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\r\n// \t\t\t\tleading_digits_patterns: [\"[3489]\"],\r\n// \t\t\t\tformat: \"$1 $2-$3-$4\"\r\n// \t\t\t},\r\n// \t\t\t...]\r\n// \t\t},\r\n// \t\t...\r\n// \t}\r\n// }\r\n//\r\n// `country_phone_code_to_countries` map is kinda redundant.\r\n// Not sure why did I choose to place country phone codes\r\n// into a separate structure inside metadata instead of generating it in runtime.\r\n// One extra feature it gives though is it tells what's the\r\n// \"default\" country for a given country phone code.\r\n// E.g. for country phone code `1` the \"default\" country is \"US\"\r\n// and therefore \"US\" is the first country code in the\r\n// `country_phone_code_to_countries[\"1\"]` list.\r\n// The \"default\" country is the one holding metadata for a country phone code\r\n// so, for example, when \"CA\" (Canada) country is chosen\r\n// then it uses the metadata for the \"default\" country (\"US\").\r\n//\r\n// `country_phone_code_to_countries` data takes about 3 KiloBytes\r\n// so it could kinda make sense to drop it from the metadata file\r\n// replacing it with a \"default\" country flag (something like `1` for \"yes\").\r\n// In that scenario `country_phone_code_to_countries` would be generated on startup.\r\n// It would have to also provide an exported `getCountryPhoneCodes()` function\r\n// which would take `metadata` and return `country_phone_code_to_countries` map\r\n// because some people use that `country_phone_code_to_countries` map in their projects.\r\n//\r\n// On the other hand, having `country_phone_code_to_countries`\r\n// prepopulated yields more elegance to the exports\r\n// because if `country_phone_code_to_countries` wasn't part of metadata\r\n// it would have to be computed somewhere in global scope\r\n// therefore the modules wouldn't be strictly \"pure\"\r\n// so maybe `country_phone_code_to_countries` stays as part of metadata.\r\n//\r\nexport default function(input, included_countries, extended, included_phone_number_types)\r\n{\r\n\t// Validate `included_phone_number_types`\r\n\tif (included_phone_number_types)\r\n\t{\r\n\t\tfor (const type of included_phone_number_types)\r\n\t\t{\r\n\t\t\tif (phone_number_types.indexOf(type) < 0)\r\n\t\t\t{\r\n\t\t\t\treturn Promise.reject(`Unknown phone number type: ${type}`)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Parse the XML metadata\r\n\treturn Promise.promisify(parseString)(input).then((xml) =>\r\n\t{\r\n\t\t// https://github.com/googlei18n/libphonenumber/blob/master/resources/PhoneNumberMetadata.xml\r\n\t\t// https://github.com/googlei18n/libphonenumber/blob/master/resources/phonemetadata.proto\r\n\t\t// https://github.com/googlei18n/libphonenumber/blob/master/javascript/i18n/phonenumbers/phonenumberutil.js\r\n\t\t// https://github.com/googlei18n/libphonenumber/blob/master/javascript/i18n/phonenumbers/asyoutypeformatter.js\r\n\r\n\t\tconst country_phone_code_to_countries = {}\r\n\t\tconst countries = {}\r\n\r\n\t\tfor (const territory of xml.phoneNumberMetadata.territories[0].territory)\r\n\t\t{\r\n\t\t\t// A two-letter country code\r\n\t\t\tconst country_code = territory.$.id\r\n\r\n\t\t\t// Skip this country if it has not been explicitly included\r\n\t\t\tif (included_countries && !included_countries.has(country_code))\r\n\t\t\t{\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\r\n\t\t\t// Country metadata\r\n\t\t\tconst country =\r\n\t\t\t{\r\n\t\t\t\t// Phone code related fields:\r\n\r\n\t\t\t\t// Phone code for phone numbers in this country.\r\n\t\t\t\t//\r\n\t\t\t\t// E.g. `1` for both USA and Canada.\r\n\t\t\t\t//\r\n\t\t\t\tphone_code: territory.$.countryCode,\r\n\r\n\t\t\t\t// In case of several countries\r\n\t\t\t\t// having the same country phone code,\r\n\t\t\t\t// these leading digits are the means\r\n\t\t\t\t// of classifying an international phone number\r\n\t\t\t\t// whether it belongs to a certain country.\r\n\t\t\t\t//\r\n\t\t\t\t// E.g. for Antigua and Barbuda\r\n\t\t\t\t// country phone code is `1` (same as USA)\r\n\t\t\t\t// and leading digits are `268`.\r\n\t\t\t\t//\r\n\t\t\t\tleading_digits: territory.$.leadingDigits,\r\n\r\n\t\t\t\t// The regular expression of all possible\r\n\t\t\t\t// national (significant) numbers for this country.\r\n\t\t\t\tnational_number_pattern: territory.generalDesc[0].nationalNumberPattern[0].replace(/\\s/g, ''),\r\n\r\n\t\t\t\t// National prefix related fields:\r\n\r\n\t\t\t\t// aka \"trunk code\".\r\n\t\t\t\t// This is the prefix prepended to a\r\n\t\t\t\t// national (significant) phone number\r\n\t\t\t\t// when dialed from within the country.\r\n\t\t\t\t// E.g. `0` for UK.\r\n\t\t\t\tnational_prefix: territory.$.nationalPrefix,\r\n\r\n\t\t\t\t// In some (many) countries the national prefix\r\n\t\t\t\t// is not just a constant digit (like `0` in UK)\r\n\t\t\t\t// but can be different depending on the phone number\r\n\t\t\t\t// (and can be also absent for some phone numbers).\r\n\t\t\t\t//\r\n\t\t\t\t// So `national_prefix_for_parsing` is used when parsing\r\n\t\t\t\t// a national-prefixed (local) phone number\r\n\t\t\t\t// into a national significant phone number\r\n\t\t\t\t// extracting that possible national prefix out of it.\r\n\t\t\t\t//\r\n\t\t\t\tnational_prefix_for_parsing : territory.$.nationalPrefixForParsing ? territory.$.nationalPrefixForParsing.replace(/\\s/g, '') : undefined,\r\n\r\n\t\t\t\t// If `national_prefix_for_parsing` regular expression\r\n\t\t\t\t// contains \"captured groups\", then `national_prefix_transform_rule`\r\n\t\t\t\t// defines how the national-prefixed (local) phone number is\r\n\t\t\t\t// parsed into a national significant phone number.\r\n\t\t\t\t//\r\n\t\t\t\t// Pseudocode:\r\n\t\t\t\t//\r\n\t\t\t\t// national_prefix_pattern = regular_expression('^(?:' + national_prefix_for_parsing + ')')\r\n\t\t\t\t// national_significant_number = all_digits.replace(national_prefix_pattern, national_prefix_transform_rule)\r\n\t\t\t\t//\r\n\t\t\t\t// E.g. if a country's national numbers are 6-digit\r\n\t\t\t\t// and national prefix is always `0`,\r\n\t\t\t\t// then `national_prefix_for_parsing` could be `0(\\d{6})`\r\n\t\t\t\t// and the corresponding `national_prefix_transform_rule` would be `$1`\r\n\t\t\t\t// (which is the default behaviour).\r\n\t\t\t\t//\r\n\t\t\t\t// Currently this feature is only used in\r\n\t\t\t\t// Argentina, Brazil, Mexico and San Marino\r\n\t\t\t\t// due to their messy telephone numbering plans.\r\n\t\t\t\t//\r\n\t\t\t\t// For example, mobile numbers in Argentina are written in two completely\r\n\t\t\t\t// different ways when dialed in-country and out-of-country\r\n\t\t\t\t// (e.g. 0343 15 555 1212 is exactly the same number as +54 9 343 555 1212).\r\n\t\t\t\t// Therefore for Argentina `national_prefix_transform_rule` is `9$1`.\r\n\t\t\t\t//\r\n\t\t\t\tnational_prefix_transform_rule: territory.$.nationalPrefixTransformRule,\r\n\r\n\t\t\t\t// Controls how national prefix is written\r\n\t\t\t\t// in a formatted local phone number.\r\n\t\t\t\t//\r\n\t\t\t\t// E.g. in Armenia national prefix is `0`\r\n\t\t\t\t// and `national_prefix_formatting_rule` is `($NP$FG)`\r\n\t\t\t\t// which means that a national significant phone number `xxxxxxxx`\r\n\t\t\t\t// matching phone number pattern `(\\d{2})(\\d{6})` with format `$1 $2`\r\n\t\t\t\t// is written as a local phone number `(0xx) xxxxxx`.\r\n\t\t\t\t//\r\n\t\t\t\tnational_prefix_formatting_rule: national_prefix_formatting_rule(territory.$.nationalPrefixFormattingRule, territory.$.nationalPrefix),\r\n\r\n\t\t\t\t// Is it possible that a national (significant)\r\n\t\t\t\t// phone number has leading zeroes?\r\n\t\t\t\t//\r\n\t\t\t\t// E.g. in Gabon some numbers start with a `0`\r\n\t\t\t\t// while the national prefix is also `0`\r\n\t\t\t\t// which is optional for mobile numbers.\r\n\t\t\t\t//\r\n\t\t\t\tnational_prefix_is_optional_when_formatting: territory.$.nationalPrefixOptionalWhenFormatting ? Boolean(territory.$.nationalPrefixOptionalWhenFormatting) : undefined,\r\n\r\n\t\t\t\t// I suppose carrier codes can be omitted.\r\n\t\t\t\t// They are required only for Brazil and Columbia,\r\n\t\t\t\t// and only when calling to fixed line numbers\r\n\t\t\t\t// from mobile phones within those countries.\r\n\t\t\t\t// I guess people living in those countries\r\n\t\t\t\t// would know that they need to add carrier codes.\r\n\t\t\t\t// Other people don't need to know that.\r\n\t\t\t\t// Anyway, if someone sends a Pull Request\r\n\t\t\t\t// implementing carrier codes as Google's `libphonenumber` does\r\n\t\t\t\t// then such Pull Request will likely be merged.\r\n\t\t\t\t//\r\n\t\t\t\t// // In some countries carrier code is required\r\n\t\t\t\t// // to dial certain phone numbers.\r\n\t\t\t\t// //\r\n\t\t\t\t// // E.g. in Colombia calling to fixed line numbers\r\n\t\t\t\t// // from mobile phones requires a carrier code when called within Colombia.\r\n\t\t\t\t// // Or, for example, Brazilian fixed line and mobile numbers\r\n\t\t\t\t// // need to be dialed with a carrier code when called within Brazil.\r\n\t\t\t\t// // Without that, most of the carriers won't connect the call.\r\n\t\t\t\t// // These are the only two cases when \"carrier codes\" are required.\r\n\t\t\t\t// //\r\n\t\t\t\t// carrier_code_formatting_rule: territory.$.carrierCodeFormattingRule,\r\n\r\n\t\t\t\t// These `types` will be purged later,\r\n\t\t\t\t// if they're not needed (which is most likely).\r\n\t\t\t\t// See `country_phone_code_to_countries` ambiguity for more info.\r\n\t\t\t\t//\r\n\t\t\t\ttypes: get_phone_number_types(territory),\r\n\r\n\t\t\t\t// Will be filtered out during compression phase\r\n\t\t\t\texamples: get_phone_number_examples(territory)\r\n\t\t\t}\r\n\r\n\t\t\t// Check that national (significant) phone number pattern\r\n\t\t\t// is set for this country (no \"default\" value here)\r\n\t\t\tif (!country.national_number_pattern)\r\n\t\t\t{\r\n\t\t\t\tthrow new Error(`\"generalDesc.nationalNumberPattern\" is missing for country ${country_code} metadata`)\r\n\t\t\t}\r\n\r\n\t\t\t// Some countries don't have `availableFormats` specified,\r\n\t\t\t// because those formats are inherited from the \"main country for region\".\r\n\t\t\tif (territory.availableFormats)\r\n\t\t\t{\r\n\t\t\t\tcountry.formats = territory.availableFormats[0].numberFormat.map((number_format) =>\r\n\t\t\t\t({\r\n\t\t\t\t\tpattern: number_format.$.pattern,\r\n\t\t\t\t\tleading_digits_patterns: number_format.leadingDigits ? number_format.leadingDigits.map(leading_digits => leading_digits.replace(/\\s/g, '')) : undefined,\r\n\t\t\t\t\tnational_prefix_formatting_rule: national_prefix_formatting_rule(number_format.$.nationalPrefixFormattingRule, territory.$.nationalPrefix),\r\n\t\t\t\t\tnational_prefix_is_optional_when_formatting: number_format.$.nationalPrefixOptionalWhenFormatting,\r\n\t\t\t\t\tformat: number_format.format[0],\r\n\t\t\t\t\tinternational_format: number_format.intlFormat ? number_format.intlFormat[0] : undefined\r\n\t\t\t\t}))\r\n\t\t\t\t// Screw local-only formats\r\n\t\t\t\t.filter(format => format.international_format !== 'NA')\r\n\r\n\t\t\t\t// Sanity check (using no \"default\" for this field)\r\n\t\t\t\tfor (let format of country.formats)\r\n\t\t\t\t{\r\n\t\t\t\t\t// Never happens\r\n\t\t\t\t\tif (!format.format)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrow new Error(`No phone number format \"format\" supplied for pattern ${format.pattern} for ${country_code}`)\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Never happens\r\n\t\t\t\t\tif (format.format.indexOf(DIGIT_PLACEHOLDER) >= 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrow new Error(`Phone number format \"${format.format}\" contains a reserved \"${DIGIT_PLACEHOLDER}\" symbol for pattern ${format.pattern} for ${country_code}`)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Add this country's metadata\r\n\t\t\t// to the metadata map.\r\n\t\t\tcountries[country_code] = country\r\n\r\n\t\t\t// Register this country's \"country phone code\"\r\n\r\n\t\t\tif (!country_phone_code_to_countries[country.phone_code])\r\n\t\t\t{\r\n\t\t\t\tcountry_phone_code_to_countries[country.phone_code] = []\r\n\t\t\t}\r\n\r\n\t\t\t// In case of several countries\r\n\t\t\t// having the same country phone code.\r\n\t\t\t//\r\n\t\t\t// E.g. for USA and Canada, USA is the\r\n\t\t\t// \"main country for phone code 1\".\r\n\t\t\t//\r\n\t\t\t// (maybe this field is not used at all\r\n\t\t\t//  in which case this field is to be removed)\r\n\t\t\t//\r\n\t\t\tif (territory.$.mainCountryForCode === \"true\")\r\n\t\t\t{\r\n\t\t\t\tcountry_phone_code_to_countries[country.phone_code].unshift(country_code)\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tcountry_phone_code_to_countries[country.phone_code].push(country_code)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Some countries don't have `availableFormats` specified,\r\n\t\t// because those formats are meant to be copied\r\n\t\t// from the \"main country for region\".\r\n\t\tfor (let country_code of Object.keys(countries))\r\n\t\t{\r\n\t\t\tconst country = countries[country_code]\r\n\r\n\t\t\tconst main_country_for_region_code = country_phone_code_to_countries[country.phone_code][0]\r\n\t\t\tconst main_country_for_region = countries[main_country_for_region_code]\r\n\t\t\tcountry.formats = main_country_for_region.formats\r\n\r\n\t\t\t// Some countries like Saint Helena and Falkland Islands\r\n\t\t\t// ('AC', 'FK', 'KI', 'NU', 'SH', 'TA', ...)\r\n\t\t\t// don't have any phone number formats\r\n\t\t\t// and phone numbers are formatted as a block in those countries.\r\n\t\t\tif (!country.formats)\r\n\t\t\t{\r\n\t\t\t\tcountry.formats = []\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Turns out that `<generalDesc><nationalNumberPattern/></generalDesc>`\r\n\t\t// is not preemptive at all: it's too unspecific for the cases\r\n\t\t// when several countries correspond to the same country phone code\r\n\t\t// (e.g. NANPA: US, Canada, etc — all correspond to the same `1` country phone code).\r\n\t\t// For these cases all those bulky `<fixedLine/>`, `<mobile/>`, etc\r\n\t\t// patterns are required. Therefore retain them for these rare cases.\r\n\t\t//\r\n\t\t// This increases metadata size by 5 KiloBytes.\r\n\t\t//\r\n\t\tfor (const country_phone_code of Object.keys(country_phone_code_to_countries))\r\n\t\t{\r\n\t\t\tconst country_codes = country_phone_code_to_countries[country_phone_code]\r\n\r\n\t\t\t// Purge `types` regular expressions (they are huge)\r\n\t\t\t// when they're not needed for resolving country phone code\r\n\t\t\t// to country phone number matching.\r\n\t\t\t// E.g. when there's a one-to-one correspondence\r\n\t\t\t// between a country phone code and a country code\r\n\t\t\tconst all_types_required = country_codes.length > 1\r\n\r\n\t\t\tif (!extended && !included_phone_number_types && !all_types_required)\r\n\t\t\t{\r\n\t\t\t\tdelete countries[country_codes[0]].types\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\r\n\t\t\tfor (const country_code of country_codes)\r\n\t\t\t{\r\n\t\t\t\t// Leading digits for a country are sufficient\r\n\t\t\t\t// to resolve country phone code ambiguity.\r\n\t\t\t\t// So retaining all phone number type regular expressions\r\n\t\t\t\t// is not required in this case.\r\n\t\t\t\tif (!extended && !included_phone_number_types)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (countries[country_code].leading_digits)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdelete countries[country_code].types\r\n\t\t\t\t\t\tcontinue\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst types = countries[country_code].types\r\n\r\n\t\t\t\t// Find duplicate regular expressions for types\r\n\t\t\t\t// and just discard such duplicate types\r\n\t\t\t\t// to reduce metadata size (by 5 KiloBytes).\r\n\t\t\t\t// Or retain regular expressions just for the\r\n\t\t\t\t// specified phone number types (if configured).\r\n\t\t\t\tfor (const type of phone_number_types)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (!types[type])\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcontinue\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Retain regular expressions just for the\r\n\t\t\t\t\t// specified phone number types (if configured).\r\n\t\t\t\t\tif (included_phone_number_types)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (!all_types_required && !included_phone_number_types.has(type))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdelete types[type]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Remove redundant types\r\n\t\t\t\t\t// (other types having the same regular expressions as this one)\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tphone_number_types\r\n\t\t\t\t\t\t\t.filter(key => key !== type && types[key] === types[type])\r\n\t\t\t\t\t\t\t.forEach(key => delete types[key])\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn { countries, country_phone_code_to_countries }\r\n\t})\r\n}\r\n\r\n// Replaces $NP with national prefix and $FG with the first group ($1)\r\nfunction national_prefix_formatting_rule(rule, national_prefix)\r\n{\r\n\tif (!rule)\r\n\t{\r\n\t\treturn\r\n\t}\r\n\r\n\t// Replace $NP with national prefix and $FG with the first group ($1)\r\n\treturn rule\r\n\t\t.replace('$NP', national_prefix)\r\n\t\t.replace('$FG', '$1')\r\n}\r\n\r\n// Extracts various phone number type patterns from country XML metadata\r\nfunction get_phone_number_types(territory)\r\n{\r\n\treturn phone_number_types.reduce((output, type) =>\r\n\t{\r\n\t\tconst camel_cased_type = underscore_to_camel_case(type)\r\n\t\tconst pattern = territory[camel_cased_type] && territory[camel_cased_type][0].nationalNumberPattern[0].replace(/\\s/g, '')\r\n\r\n\t\tif (pattern)\r\n\t\t{\r\n\t\t\toutput[type] = pattern\r\n\t\t}\r\n\r\n\t\treturn output\r\n\t},\r\n\t{})\r\n}\r\n\r\n// Extracts various phone number type examples from country XML metadata\r\nfunction get_phone_number_examples(territory)\r\n{\r\n\treturn phone_number_types.reduce((output, type) =>\r\n\t{\r\n\t\tconst camel_cased_type = underscore_to_camel_case(type)\r\n\t\tconst example = territory[camel_cased_type] && territory[camel_cased_type][0].exampleNumber[0]\r\n\r\n\t\tif (example)\r\n\t\t{\r\n\t\t\toutput[type] = example\r\n\t\t}\r\n\r\n\t\treturn output\r\n\t},\r\n\t{})\r\n}\r\n\r\nfunction underscore_to_camel_case(string)\r\n{\r\n\treturn string.replace(/(\\_\\w)/g, function(match)\r\n\t{\r\n\t\treturn match[1].toUpperCase()\r\n\t})\r\n}"]}