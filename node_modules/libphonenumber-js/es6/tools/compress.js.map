{"version":3,"sources":["../../source/tools/compress.js"],"names":["compress","input","countries","country_code","country","country_array","phone_code","national_number_pattern","formats","map","format","format_array","pattern","leading_digits_patterns","national_prefix_formatting_rule","national_prefix_is_optional_when_formatting","international_format","trim_array","national_prefix","national_prefix_for_parsing","national_prefix_transform_rule","leading_digits","types","types_array","fixed_line","mobile","toll_free","premium_rate","personal_number","voice_mail","uan","pager","voip","shared_cost","push","output","country_phone_code_to_countries","is_empty","value","undefined","Array","isArray","length","array","pop"],"mappings":";;AAAA,eAAe,SAASA,QAAT,CAAkBC,KAAlB,EACf;AACC,KAAMC,YAAY,EAAlB;;AADD;AAAA;AAAA;;AAAA;AAGC,oCAAyB,aAAYD,MAAMC,SAAlB,CAAzB,4GACA;AAAA,OADSC,YACT;;AACC,OAAMC,UAAUH,MAAMC,SAAN,CAAgBC,YAAhB,CAAhB;;AAEA;AACA,OAAME,gBACN,CACCD,QAAQE,UADT,EAECF,QAAQG,uBAFT,EAICH,QAAQI,OAAR,CAAgBC,GAAhB,CAAoB,UAACC,MAAD,EACpB;AACC;AACA,QAAMC,eACN,CACCD,OAAOE,OADR,EAECF,OAAOA,MAFR,EAGCA,OAAOG,uBAHR,EAICH,OAAOI,+BAJR,EAKCJ,OAAOK,2CALR,EAMCL,OAAOM,oBANR,CADA;;AAUA,WAAOC,WAAWN,YAAX,CAAP;AACA,IAdD,CAJD,EAoBCP,QAAQc,eApBT,EAqBCd,QAAQU,+BArBT,EAsBCV,QAAQe,2BAtBT,EAuBCf,QAAQgB,8BAvBT,EAwBChB,QAAQW,2CAxBT,EAyBCX,QAAQiB,cAzBT,CADA;;AA6BA,OAAIjB,QAAQkB,KAAZ,EACA;AACC,QAAMC,cACN;AACC;AACAnB,YAAQkB,KAAR,CAAcE,UAFf,EAGCpB,QAAQkB,KAAR,CAAcG,MAHf,EAICrB,QAAQkB,KAAR,CAAcI,SAJf,EAKCtB,QAAQkB,KAAR,CAAcK,YALf,EAMCvB,QAAQkB,KAAR,CAAcM,eANf;;AAQC;AACAxB,YAAQkB,KAAR,CAAcO,UATf,EAUCzB,QAAQkB,KAAR,CAAcQ,GAVf,EAWC1B,QAAQkB,KAAR,CAAcS,KAXf,EAYC3B,QAAQkB,KAAR,CAAcU,IAZf,EAaC5B,QAAQkB,KAAR,CAAcW,WAbf,CADA;;AAiBA5B,kBAAc6B,IAAd,CAAmBjB,WAAWM,WAAX,CAAnB;AACA;;AAEDrB,aAAUC,YAAV,IAA0Bc,WAAWZ,aAAX,CAA1B;AACA;;AAED;AACA;AACA;AACA;AACA;AAlED;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoEC,KAAM8B,SACN;AACCC,mCAAiCnC,MAAMmC,+BADxC;AAEClC;AAFD,EADA;;AAMA,QAAOiC,MAAP;AACA;;AAED,SAASE,QAAT,CAAkBC,KAAlB,EACA;AACC,QAAOA,UAAUC,SAAV,IACHD,UAAU,IADP,IAEHA,UAAU,KAFP,IAGFE,MAAMC,OAAN,CAAcH,KAAd,KAAwBA,MAAMI,MAAN,KAAiB,CAH9C;AAIA;;AAED;AACA,SAASzB,UAAT,CAAoB0B,KAApB,EACA;AACC,QAAOA,MAAMD,MAAN,GAAe,CAAf,IAAoBL,SAASM,MAAMA,MAAMD,MAAN,GAAe,CAArB,CAAT,CAA3B,EACA;AACCC,QAAMC,GAAN;AACA;;AAED,QAAOD,KAAP;AACA","file":"compress.js","sourcesContent":["export default function compress(input)\r\n{\r\n\tconst countries = {}\r\n\r\n\tfor (let country_code of Object.keys(input.countries))\r\n\t{\r\n\t\tconst country = input.countries[country_code]\r\n\r\n\t\t// When changing this array also change getters in `./metadata.js`\r\n\t\tconst country_array =\r\n\t\t[\r\n\t\t\tcountry.phone_code,\r\n\t\t\tcountry.national_number_pattern,\r\n\r\n\t\t\tcountry.formats.map((format) =>\r\n\t\t\t{\r\n\t\t\t\t// When changing this array also change getters in `./metadata.js`\r\n\t\t\t\tconst format_array =\r\n\t\t\t\t[\r\n\t\t\t\t\tformat.pattern,\r\n\t\t\t\t\tformat.format,\r\n\t\t\t\t\tformat.leading_digits_patterns,\r\n\t\t\t\t\tformat.national_prefix_formatting_rule,\r\n\t\t\t\t\tformat.national_prefix_is_optional_when_formatting,\r\n\t\t\t\t\tformat.international_format\r\n\t\t\t\t]\r\n\r\n\t\t\t\treturn trim_array(format_array)\r\n\t\t\t}),\r\n\r\n\t\t\tcountry.national_prefix,\r\n\t\t\tcountry.national_prefix_formatting_rule,\r\n\t\t\tcountry.national_prefix_for_parsing,\r\n\t\t\tcountry.national_prefix_transform_rule,\r\n\t\t\tcountry.national_prefix_is_optional_when_formatting,\r\n\t\t\tcountry.leading_digits\r\n\t\t]\r\n\r\n\t\tif (country.types)\r\n\t\t{\r\n\t\t\tconst types_array =\r\n\t\t\t[\r\n\t\t\t\t// These are common\r\n\t\t\t\tcountry.types.fixed_line,\r\n\t\t\t\tcountry.types.mobile,\r\n\t\t\t\tcountry.types.toll_free,\r\n\t\t\t\tcountry.types.premium_rate,\r\n\t\t\t\tcountry.types.personal_number,\r\n\r\n\t\t\t\t// These are less common\r\n\t\t\t\tcountry.types.voice_mail,\r\n\t\t\t\tcountry.types.uan,\r\n\t\t\t\tcountry.types.pager,\r\n\t\t\t\tcountry.types.voip,\r\n\t\t\t\tcountry.types.shared_cost\r\n\t\t\t]\r\n\r\n\t\t\tcountry_array.push(trim_array(types_array))\r\n\t\t}\r\n\r\n\t\tcountries[country_code] = trim_array(country_array)\r\n\t}\r\n\r\n\t// const output =\r\n\t// [\r\n\t// \tinput.country_phone_code_to_countries,\r\n\t// \tcountries\r\n\t// ]\r\n\r\n\tconst output =\r\n\t{\r\n\t\tcountry_phone_code_to_countries: input.country_phone_code_to_countries,\r\n\t\tcountries\r\n\t}\r\n\r\n\treturn output\r\n}\r\n\r\nfunction is_empty(value)\r\n{\r\n\treturn value === undefined\r\n\t\t|| value === null\r\n\t\t|| value === false\r\n\t\t|| (Array.isArray(value) && value.length === 0)\r\n}\r\n\r\n// Removes trailing empty values from an `array`\r\nfunction trim_array(array)\r\n{\r\n\twhile (array.length > 0 && is_empty(array[array.length - 1]))\r\n\t{\r\n\t\tarray.pop()\r\n\t}\r\n\r\n\treturn array\r\n}"]}