{"version":3,"sources":["../source/AsYouType.test.js"],"names":["chai","expect","should","metadata","as_you_type_custom","close_dangling_braces","repeat","as_you_type","country_code","describe","it","input","equal","formatter","type","country","country_phone_code","template","reset","national_number","thrower","throw","something"],"mappings":"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","file":"AsYouType.test.js","sourcesContent":["import chai, { expect } from 'chai'\r\nchai.should()\r\n\r\nimport metadata from '../metadata.min'\r\nimport as_you_type_custom, { close_dangling_braces, repeat } from '../source/AsYouType'\r\n\r\nclass as_you_type extends as_you_type_custom\r\n{\r\n\tconstructor(country_code)\r\n\t{\r\n\t\tsuper(country_code, metadata)\r\n\t}\r\n}\r\n\r\ndescribe('as you type', () =>\r\n{\r\n\tit('should parse and format phone numbers as you type', function()\r\n\t{\r\n\t\t// International number test\r\n\t\tnew as_you_type().input('+12133734').should.equal('+1 213 373 4')\r\n\t\t// Local number test\r\n\t\tnew as_you_type('US').input('2133734').should.equal('(213) 373-4')\r\n\r\n\t\t// With national prefix test\r\n\t\tnew as_you_type('RU').input('88005553535').should.equal('8 (800) 555-35-35')\r\n\r\n\t\t// Should discard the national prefix\r\n\t\t// when a whole phone number format matches\r\n\t\tnew as_you_type('RU').input('8800555353').should.equal('880 055-53-53')\r\n\r\n\t\tnew as_you_type('CH').input('044-668-1').should.equal('044 668 1')\r\n\r\n\t\tlet formatter\r\n\r\n\t\t// Test International phone number (international)\r\n\r\n\t\tformatter = new as_you_type()\r\n\r\n\t\t// formatter.valid.should.be.false\r\n\t\ttype(formatter.country).should.equal('undefined')\r\n\t\ttype(formatter.country_phone_code).should.equal('undefined')\r\n\t\ttype(formatter.template).should.equal('undefined')\r\n\r\n\t\tformatter.input('+').should.equal('+')\r\n\r\n\t\t// formatter.valid.should.be.false\r\n\t\ttype(formatter.country).should.equal('undefined')\r\n\t\ttype(formatter.country_phone_code).should.equal('undefined')\r\n\t\ttype(formatter.template).should.equal('undefined')\r\n\r\n\t\tformatter.input('1').should.equal('+1')\r\n\r\n\t\t// formatter.valid.should.be.false\r\n\t\ttype(formatter.country).should.equal('undefined')\r\n\t\tformatter.country_phone_code.should.equal('1')\r\n\t\ttype(formatter.template).should.equal('undefined')\r\n\r\n\t\tformatter.input('2').should.equal('+1 2')\r\n\t\tformatter.template.should.equal('xx x')\r\n\r\n\t\t// formatter.valid.should.be.false\r\n\t\ttype(formatter.country).should.equal('undefined')\r\n\r\n\t\tformatter.input('1').should.equal('+1 21')\r\n\t\tformatter.input('3').should.equal('+1 213')\r\n\t\tformatter.input(' ').should.equal('+1 213')\r\n\t\tformatter.input('3').should.equal('+1 213 3')\r\n\t\tformatter.input('3').should.equal('+1 213 33')\r\n\t\tformatter.input('3').should.equal('+1 213 333')\r\n\t\tformatter.input('4').should.equal('+1 213 333 4')\r\n\t\tformatter.input('4').should.equal('+1 213 333 44')\r\n\t\tformatter.input('4').should.equal('+1 213 333 444')\r\n\r\n\t\t// formatter.valid.should.be.false\r\n\t\ttype(formatter.country).should.equal('undefined')\r\n\r\n\t\tformatter.input('4').should.equal('+1 213 333 4444')\r\n\r\n\t\t// formatter.valid.should.be.true\r\n\t\tformatter.country.should.equal('US')\r\n\t\t// This one below contains \"punctuation spaces\"\r\n\t\t// along with the regular spaces\r\n\t\tformatter.template.should.equal('xx xxx xxx xxxx')\r\n\r\n\t\tformatter.input('5').should.equal('+121333344445')\r\n\r\n\t\t// formatter.valid.should.be.false\r\n\t\ttype(formatter.country).should.equal('undefined')\r\n\t\tformatter.country_phone_code.should.equal('1')\r\n\t\ttype(formatter.template).should.equal('undefined')\r\n\r\n\t\t// Check that clearing an international formatter\r\n\t\t// also clears country metadata.\r\n\r\n\t\tformatter.reset()\r\n\r\n\t\tformatter.input('+').should.equal('+')\r\n\t\tformatter.input('7').should.equal('+7')\r\n\t\tformatter.input('9').should.equal('+7 9')\r\n\t\tformatter.input('99 111 22 33').should.equal('+7 999 111 22 33')\r\n\r\n\t\t// Test Switzerland phone numbers\r\n\r\n\t\tformatter = new as_you_type('CH')\r\n\r\n\t\tformatter.input(' ').should.equal('')\r\n\t\tformatter.input('0').should.equal('0')\r\n\t\tformatter.input('4').should.equal('04')\r\n\t\tformatter.input(' ').should.equal('04')\r\n\t\tformatter.input('-').should.equal('04')\r\n\t\tformatter.input('4').should.equal('044')\r\n\t\tformatter.input('-').should.equal('044')\r\n\t\tformatter.input('6').should.equal('044 6')\r\n\t\tformatter.input('6').should.equal('044 66')\r\n\t\tformatter.input('8').should.equal('044 668')\r\n\t\tformatter.input('-').should.equal('044 668')\r\n\t\tformatter.input('1').should.equal('044 668 1')\r\n\t\tformatter.input('8').should.equal('044 668 18')\r\n\r\n\t\t// formatter.valid.should.be.false\r\n\t\tformatter.country.should.equal('CH')\r\n\t\tformatter.template.should.equal('xxx xxx xx xx')\r\n\r\n\t\tformatter.input(' 00').should.equal('044 668 18 00')\r\n\r\n\t\t// formatter.valid.should.be.true\r\n\t\tformatter.country.should.equal('CH')\r\n\t\tformatter.template.should.equal('xxx xxx xx xx')\r\n\r\n\t\tformatter.input('9').should.equal('04466818009')\r\n\r\n\t\t// formatter.valid.should.be.false\r\n\t\tformatter.country.should.equal('CH')\r\n\t\ttype(formatter.template).should.equal('undefined')\r\n\r\n\t\t// Kazakhstan (non-main country for +7 country phone code)\r\n\r\n\t\tformatter = new as_you_type()\r\n\r\n\t\tformatter.input('+77172580659')\r\n\t\tformatter.country.should.equal('KZ')\r\n\r\n\t\t// Brazil\r\n\r\n\t\tformatter = new as_you_type('BR')\r\n\t\tformatter.input('11987654321').should.equal('(11) 98765-4321')\r\n\r\n\t\t// UK (Jersey) (non-main country for +44 country phone code)\r\n\r\n\t\tformatter = new as_you_type()\r\n\t\tformatter.input('+447700300000').should.equal('+44 7700 300000')\r\n\t\tformatter.template.should.equal('xxx xxxx xxxxxx')\r\n\t\tformatter.country.should.equal('JE')\r\n\r\n\t\t// Test Afghanistan phone numbers\r\n\r\n\t\tformatter = new as_you_type('AF')\r\n\r\n\t\t// No national prefix\r\n\t\tformatter.input('44444444').should.equal('44444444')\r\n\t\ttype(formatter.template).should.equal('undefined')\r\n\r\n\t\tformatter.reset().input('044444444').should.equal('044 444 444')\r\n\t\tformatter.template.should.equal('xxx xxx xxxx')\r\n\r\n\t\t// Hungary (braces must be part of the template)\r\n\t\tformatter = new as_you_type('HU')\r\n\t\tformatter.input('301234567').should.equal('(30) 123 4567')\r\n\t\tformatter.template.should.equal('(xx) xxx xxxx')\r\n\r\n\t\t// Test Russian phone numbers\r\n\t\t// (with optional national prefix `8`)\r\n\r\n\t\tformatter = new as_you_type('RU')\r\n\r\n\t\tformatter.input('8').should.equal('8')\r\n\t\tformatter.input('9').should.equal('8 (9  )')\r\n\t\tformatter.input('9').should.equal('8 (99 )')\r\n\t\tformatter.input('9').should.equal('8 (999)')\r\n\t\tformatter.input('-').should.equal('8 (999)')\r\n\t\tformatter.input('1234').should.equal('8 (999) 123-4')\r\n\t\tformatter.input('567').should.equal('8 (999) 123-45-67')\r\n\t\tformatter.input('8').should.equal('899912345678')\r\n\r\n\t\t// Shouldn't strip national prefix if it is optional\r\n\t\t// and if it's a valid phone number.\r\n\t\tformatter = new as_you_type('RU')\r\n\t\tformatter.input('8005553535')\r\n\t\tformatter.national_number.should.equal('8005553535')\r\n\r\n\t\t// Check that clearing an national formatter:\r\n\t\t//  * doesn't clear country metadata\r\n\t\t//  * clears all other things\r\n\r\n\t\tformatter.reset()\r\n\r\n\t\tformatter.input('8').should.equal('8')\r\n\t\tformatter.input('9').should.equal('8 (9  )')\r\n\t\tformatter.input('9').should.equal('8 (99 )')\r\n\t\tformatter.input('9').should.equal('8 (999)')\r\n\t\tformatter.input('-').should.equal('8 (999)')\r\n\t\tformatter.input('1234').should.equal('8 (999) 123-4')\r\n\t\tformatter.input('567').should.equal('8 (999) 123-45-67')\r\n\t\tformatter.input('8').should.equal('899912345678')\r\n\r\n\t\t// National prefix should not be prepended\r\n\t\t// when formatting local NANPA phone numbers.\r\n\t\tnew as_you_type('US').input('1').should.equal('1')\r\n\t\tnew as_you_type('US').input('12').should.equal('12')\r\n\t\tnew as_you_type('US').input('123').should.equal('(23 )')\r\n\r\n\t\t// Bulgaria\r\n\t\t// (should not prepend national prefix `0`)\r\n\t\tnew as_you_type('BG').input('111 222 3').should.equal('1112223')\r\n\r\n\t\t// Brazil\r\n\t\t// (should not add braces around `12`\r\n\t\t//  because the phone number is being output in the international format)\r\n\t\tnew as_you_type().input('+55123456789').should.equal('+55 12 3456 789')\r\n\t\tnew as_you_type('BR').input('+55123456789').should.equal('+55 12 3456 789')\r\n\t\tnew as_you_type('BR').input('123456789').should.equal('(12) 3456-789')\r\n\r\n\t\t// Deutchland\r\n\t\tnew as_you_type().input('+4915539898001').should.equal('+49 15539 898001')\r\n\r\n\t\t// KZ detection\r\n\t\tformatter = new as_you_type()\r\n\t\tformatter.input('+7 702 211 1111')\r\n\t\tformatter.country.should.equal('KZ')\r\n\t\t// formatter.valid.should.equal(true)\r\n\r\n\t\t// New Zealand formatting fix (issue #89)\r\n\t\tnew as_you_type('NZ').input('0212').should.equal('021 2')\r\n\r\n\t\t// South Korea\r\n\t\tformatter = new as_you_type()\r\n\t\tformatter.input('+82111111111').should.equal('+82 11 111 1111')\r\n\t\tformatter.template.should.equal('xxx xx xxx xxxx')\r\n\t})\r\n\r\n\tit('should close dangling braces', function()\r\n\t{\r\n\t\tclose_dangling_braces('(9)', 2).should.equal('(9)')\r\n\r\n\t\tlet formatter\r\n\r\n\t\t// Test braces (US)\r\n\r\n\t\tformatter = new as_you_type('US')\r\n\r\n\t\tformatter.input('9').should.equal('(9  )')\r\n\t\tformatter.input('9').should.equal('(99 )')\r\n\t\tformatter.input('9').should.equal('(999)')\r\n\t\tformatter.input('1').should.equal('(999) 1')\r\n\r\n\t\t// Test braces (RU)\r\n\r\n\t\tformatter = new as_you_type('RU')\r\n\r\n\t\tformatter.input('8').should.equal('8')\r\n\t\tformatter.input('9').should.equal('8 (9  )')\r\n\t\tformatter.input('9').should.equal('8 (99 )')\r\n\t\tformatter.input('9').should.equal('8 (999)')\r\n\t\tformatter.input('1').should.equal('8 (999) 1')\r\n\t})\r\n\r\n\tit(`should fall back to the default country`, function()\r\n\t{\r\n\t\tconst formatter = new as_you_type('RU')\r\n\r\n\t\tformatter.input('8').should.equal('8')\r\n\t\tformatter.input('9').should.equal('8 (9  )')\r\n\t\tformatter.input('9').should.equal('8 (99 )')\r\n\t\tformatter.input('9').should.equal('8 (999)')\r\n\r\n\t\t// formatter.valid.should.be.false\r\n\t\tformatter.template.should.equal('x (xxx) xxx-xx-xx')\r\n\t\tformatter.country.should.equal('RU')\r\n\t\tformatter.country_phone_code.should.equal('7')\r\n\r\n\t\tformatter.input('000000000000').should.equal('8999000000000000')\r\n\r\n\t\t// formatter.valid.should.be.false\r\n\t\ttype(formatter.template).should.equal('undefined')\r\n\t\tformatter.country.should.equal('RU')\r\n\t\tformatter.country_phone_code.should.equal('7')\r\n\r\n\t\tformatter.reset()\r\n\r\n\t\t// formatter.valid.should.be.false\r\n\t\ttype(formatter.template).should.equal('undefined')\r\n\t\tformatter.country.should.equal('RU')\r\n\t\tformatter.country_phone_code.should.equal('7')\r\n\r\n\t\tformatter.input('+1-213-373-4253').should.equal('+1 213 373 4253')\r\n\r\n\t\t// formatter.valid.should.be.true\r\n\t\tformatter.template.should.equal('xx xxx xxx xxxx')\r\n\t\tformatter.country.should.equal('US')\r\n\t\tformatter.country_phone_code.should.equal('1')\r\n\t})\r\n\r\n\tit('should work in edge cases', function()\r\n\t{\r\n\t\tlet formatter\r\n\t\tlet thrower\r\n\r\n\t\t// No metadata\r\n\t\tthrower = () => new as_you_type_custom('RU')\r\n\t\tthrower.should.throw('Metadata is required')\r\n\r\n\t\t// Second '+' sign\r\n\r\n\t\tformatter = new as_you_type('RU')\r\n\r\n\t\tformatter.input('+').should.equal('+')\r\n\t\tformatter.input('7').should.equal('+7')\r\n\t\tformatter.input('+').should.equal('+7')\r\n\r\n\t\t// Out-of-position '+' sign\r\n\r\n\t\tformatter = new as_you_type('RU')\r\n\r\n\t\tformatter.input('8').should.equal('8')\r\n\t\tformatter.input('+').should.equal('8')\r\n\r\n\t\t// No format matched\r\n\r\n\t\tformatter = new as_you_type('RU')\r\n\r\n\t\tformatter.input('88005553535').should.equal('8 (800) 555-35-35')\r\n\t\tformatter.input('0').should.equal('880055535350')\r\n\r\n\t\t// Invalid country phone code\r\n\r\n\t\tformatter = new as_you_type()\r\n\r\n\t\tformatter.input('+0123').should.equal('+0123')\r\n\r\n\t\t// No country specified and not an international number\r\n\r\n\t\tformatter = new as_you_type()\r\n\r\n\t\tformatter.input('88005553535').should.equal('88005553535')\r\n\r\n\t\t// Extract national prefix when no `national_prefix` is set\r\n\r\n\t\tformatter = new as_you_type('AD')\r\n\r\n\t\tformatter.input('155555').should.equal('155 555')\r\n\r\n\t\t// Typing nonsense\r\n\r\n\t\tformatter = new as_you_type('RU')\r\n\r\n\t\tformatter.input('+1abc2').should.equal('')\r\n\r\n\t\t// Should reset default country when explicitly\r\n\t\t// typing in an international phone number\r\n\r\n\t\tformatter = new as_you_type('RU')\r\n\r\n\t\tformatter.input('+')\r\n\t\ttype(formatter.country).should.equal('undefined')\r\n\t\ttype(formatter.country_phone_code).should.equal('undefined')\r\n\r\n\t\t// Country not inferrable from the phone number,\r\n\t\t// while the phone number itself can already be formatted \"completely\".\r\n\r\n\t\tformatter = new as_you_type()\r\n\r\n\t\tformatter.input('+12223333333')\r\n\t\ttype(formatter.country).should.equal('undefined')\r\n\t\tformatter.country_phone_code.should.equal('1')\r\n\r\n\t\t// An otherwise matching phone number format is skipped\r\n\t\t// when it requires a national prefix but no national prefix was entered.\r\n\t\tformatter = new as_you_type('CN')\r\n\t\tformatter.input('01010000').should.equal('010 10000')\r\n\t\tformatter.reset().input('1010000').should.equal('10 1000 0')\r\n\r\n\t\t// Reset a chosen format when it no longer holds given the new leading digits.\r\n\t\t// If Google changes metadata for Australia then this test might not cover the case.\r\n\t\tformatter = new as_you_type('AU')\r\n\t\tformatter.input('180').should.equal('180')\r\n\t\tformatter.input('2').should.equal('180 2')\r\n\t})\r\n\r\n\tit('should not accept phone number extensions', function()\r\n\t{\r\n\t\tnew as_you_type().input('+1-213-373-4253 ext. 123').should.equal('')\r\n\t})\r\n\r\n\tit('should parse non-European digits', function()\r\n\t{\r\n\t\tnew as_you_type().input('+١٢١٢٢٣٢٣٢٣٢').should.equal('+1 212 232 3232')\r\n\t})\r\n\r\n\tit('should repeat string N times', function()\r\n\t{\r\n\t\trepeat('a', 0).should.equal('')\r\n\t\trepeat('a', 3).should.equal('aaa')\r\n\t\trepeat('a', 4).should.equal('aaaa')\r\n\t})\r\n})\r\n\r\nfunction type(something)\r\n{\r\n\treturn typeof something\r\n}"]}