{"version":3,"sources":["../source/metadata.js"],"names":["get_phone_code","country_metadata","get_national_number_pattern","get_formats","get_national_prefix","get_national_prefix_formatting_rule","get_national_prefix_for_parsing","national_prefix_for_parsing","get_national_prefix_transform_rule","get_national_prefix_is_optional_when_formatting","get_leading_digits","get_format_pattern","format_array","get_format_format","get_format_leading_digits_patterns","get_format_national_prefix_formatting_rule","get_format_national_prefix_is_optional_when_formatting","get_format_national_prefix_is_mandatory_when_formatting","national_prefix_formatting_rule","get_format_uses_national_prefix","test","replace","get_format_international_format","get_metadata_by_country_phone_code","country_phone_code","metadata","country_code","country_phone_code_to_countries","countries","get_types","get_type","index","undefined","get_type_fixed_line","get_type_mobile","get_type_toll_free","get_type_premium_rate","get_type_personal_number","get_type_voice_mail","get_type_uan","get_type_pager","get_type_voip","get_type_shared_cost","get_country_phone_code","country"],"mappings":"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","file":"metadata.js","sourcesContent":["export function get_phone_code(country_metadata)\r\n{\r\n\treturn country_metadata[0]\r\n}\r\n\r\nexport function get_national_number_pattern(country_metadata)\r\n{\r\n\treturn country_metadata[1]\r\n}\r\n\r\nexport function get_formats(country_metadata)\r\n{\r\n\treturn country_metadata[2] || []\r\n}\r\n\r\nexport function get_national_prefix(country_metadata)\r\n{\r\n\treturn country_metadata[3]\r\n}\r\n\r\nexport function get_national_prefix_formatting_rule(country_metadata)\r\n{\r\n\treturn country_metadata[4]\r\n}\r\n\r\nexport function get_national_prefix_for_parsing(country_metadata)\r\n{\r\n\tlet national_prefix_for_parsing = country_metadata[5]\r\n\r\n\t// If `national_prefix_for_parsing` is not set explicitly,\r\n\t// then infer it from `national_prefix` (if any)\r\n\tif (!national_prefix_for_parsing)\r\n\t{\r\n\t\tnational_prefix_for_parsing = get_national_prefix(country_metadata)\r\n\t}\r\n\r\n\treturn national_prefix_for_parsing\r\n}\r\n\r\nexport function get_national_prefix_transform_rule(country_metadata)\r\n{\r\n\treturn country_metadata[6]\r\n}\r\n\r\nexport function get_national_prefix_is_optional_when_formatting(country_metadata)\r\n{\r\n\treturn country_metadata[7]\r\n}\r\n\r\nexport function get_leading_digits(country_metadata)\r\n{\r\n\treturn country_metadata[8]\r\n}\r\n\r\nexport function get_format_pattern(format_array)\r\n{\r\n\treturn format_array[0]\r\n}\r\n\r\nexport function get_format_format(format_array)\r\n{\r\n\treturn format_array[1]\r\n}\r\n\r\nexport function get_format_leading_digits_patterns(format_array)\r\n{\r\n\treturn format_array[2] || []\r\n}\r\n\r\nexport function get_format_national_prefix_formatting_rule(format_array, country_metadata)\r\n{\r\n\treturn format_array[3] || get_national_prefix_formatting_rule(country_metadata)\r\n}\r\n\r\nexport function get_format_national_prefix_is_optional_when_formatting(format_array, country_metadata)\r\n{\r\n\treturn format_array[4] || get_national_prefix_is_optional_when_formatting(country_metadata)\r\n}\r\n\r\nexport function get_format_national_prefix_is_mandatory_when_formatting(format_array, country_metadata)\r\n{\r\n\tconst national_prefix_formatting_rule = get_format_national_prefix_formatting_rule(format_array, country_metadata)\r\n\r\n\t// National prefix is omitted if there's no national prefix formatting rule\r\n\t// set for this country, or when the national prefix formatting rule\r\n\t// contains no national prefix itself, or when this rule is set but\r\n\t// national prefix is optional for this phone number format\r\n\t// (and it is not enforced explicitly)\r\n\treturn national_prefix_formatting_rule &&\r\n\t\t// Check that national prefix formatting rule is not a dummy one.\r\n\t\t// Check that national prefix formatting rule actually has national prefix digit(s).\r\n\t\tget_format_uses_national_prefix(national_prefix_formatting_rule) &&\r\n\t\t// Or maybe national prefix is optional for this format\r\n\t\t!get_format_national_prefix_is_optional_when_formatting(format_array, country_metadata)\r\n}\r\n\r\n// Checks whether national prefix formatting rule contains national prefix\r\nexport function get_format_uses_national_prefix(national_prefix_formatting_rule)\r\n{\r\n\t// Check that national prefix formatting rule is not a dummy one\r\n\treturn national_prefix_formatting_rule !== '$1' &&\r\n\t\t// Check that national prefix formatting rule actually has national prefix digit(s)\r\n\t\t/\\d/.test(national_prefix_formatting_rule.replace('$1', ''))\r\n}\r\n\r\nexport function get_format_international_format(format_array)\r\n{\r\n\treturn format_array[5] || get_format_format(format_array)\r\n}\r\n\r\n// Formatting information for regions which share\r\n// a country calling code is contained by only one region\r\n// for performance reasons. For example, for NANPA region\r\n// (\"North American Numbering Plan Administration\",\r\n//  which includes USA, Canada, Cayman Islands, Bahamas, etc)\r\n// it will be contained in the metadata for `US`.\r\nexport function get_metadata_by_country_phone_code(country_phone_code, metadata)\r\n{\r\n\tconst country_code = metadata.country_phone_code_to_countries[country_phone_code][0]\r\n\treturn metadata.countries[country_code]\r\n}\r\n\r\nexport function get_types(country_metadata)\r\n{\r\n\treturn country_metadata[9]\r\n}\r\n\r\nfunction get_type(country_metadata, index)\r\n{\r\n\treturn get_types(country_metadata) ? get_types(country_metadata)[index] : undefined\r\n}\r\n\r\nexport function get_type_fixed_line(country_metadata)\r\n{\r\n\treturn get_type(country_metadata, 0)\r\n}\r\n\r\nexport function get_type_mobile(country_metadata)\r\n{\r\n\treturn get_type(country_metadata, 1)\r\n}\r\n\r\nexport function get_type_toll_free(country_metadata)\r\n{\r\n\treturn get_type(country_metadata, 2)\r\n}\r\n\r\nexport function get_type_premium_rate(country_metadata)\r\n{\r\n\treturn get_type(country_metadata, 3)\r\n}\r\n\r\nexport function get_type_personal_number(country_metadata)\r\n{\r\n\treturn get_type(country_metadata, 4)\r\n}\r\n\r\nexport function get_type_voice_mail(country_metadata)\r\n{\r\n\treturn get_type(country_metadata, 5)\r\n}\r\n\r\nexport function get_type_uan(country_metadata)\r\n{\r\n\treturn get_type(country_metadata, 6)\r\n}\r\n\r\nexport function get_type_pager(country_metadata)\r\n{\r\n\treturn get_type(country_metadata, 7)\r\n}\r\n\r\nexport function get_type_voip(country_metadata)\r\n{\r\n\treturn get_type(country_metadata, 8)\r\n}\r\n\r\nexport function get_type_shared_cost(country_metadata)\r\n{\r\n\treturn get_type(country_metadata, 9)\r\n}\r\n\r\nexport function get_country_phone_code(country, country_metadata)\r\n{\r\n\treturn get_phone_code(country_metadata[country])\r\n}"]}