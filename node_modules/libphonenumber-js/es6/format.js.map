{"version":3,"sources":["../source/format.js"],"names":["matches_entirely","parse_phone_number_and_country_phone_code","VALID_PUNCTUATION","get_phone_code","get_formats","get_format_pattern","get_format_format","get_format_leading_digits_patterns","get_format_national_prefix_formatting_rule","get_format_national_prefix_is_optional_when_formatting","get_format_international_format","get_metadata_by_country_phone_code","default_options","formatExtension","number","extension","format","arg_1","arg_2","arg_3","arg_4","arg_5","sort_out_arguments","input","format_type","options","metadata","country_metadata","country","countries","phone","country_phone_code","national_number","format_national_number","international_number","ext","_national_number","FIRST_GROUP_PATTERN","format_national_number_using_format","international","enforce_national_prefix","format_pattern_matcher","RegExp","national_prefix_formatting_rule","national_prefix_may_be_omitted","replace","formatted_number","local_to_international_style","format_as","choose_format_for_number","available_formats","length","last_leading_digits_pattern","search","local","trim","Error"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA,SAASA,gBAAT,QAAiC,UAAjC;;AAEA,SAECC,yCAFD,EAGCC,iBAHD,QAKK,SALL;;AAOA,SAECC,cAFD,EAGCC,WAHD,EAICC,kBAJD,EAKCC,iBALD,EAMCC,kCAND,EAOCC,0CAPD,EAQCC,sDARD,EASCC,+BATD,EAUCC,kCAVD,QAYK,YAZL;;AAcA,IAAMC,kBACN;AACCC,kBAAiB,yBAACC,MAAD,EAASC,SAAT;AAAA,SAA0BD,MAA1B,cAAyCC,SAAzC;AAAA;;AAGlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA,CADA,CAkBA,eAAe,SAASC,MAAT,CAAgBC,KAAhB,EAAuBC,KAAvB,EAA8BC,KAA9B,EAAqCC,KAArC,EAA4CC,KAA5C,EACf;AAAA,2BAQGC,mBAAmBL,KAAnB,EAA0BC,KAA1B,EAAiCC,KAAjC,EAAwCC,KAAxC,EAA+CC,KAA/C,CARH;AAAA,KAGEE,KAHF,uBAGEA,KAHF;AAAA,KAIEC,WAJF,uBAIEA,WAJF;AAAA,KAKEC,OALF,uBAKEA,OALF;AAAA,KAMEC,QANF,uBAMEA,QANF;;AAUC,KAAIC,yBAAJ;;AAEA,KAAIJ,MAAMK,OAAV,EACA;AACCD,qBAAmBD,SAASG,SAAT,CAAmBN,MAAMK,OAAzB,CAAnB;AACA;;AAfF,6BAiBwC3B,0CAA0CsB,MAAMO,KAAhD,EAAuDJ,QAAvD,CAjBxC;AAAA,KAiBSK,kBAjBT,yBAiBSA,kBAjBT;AAAA,KAiB6BjB,MAjB7B,yBAiB6BA,MAjB7B;;AAmBC,KAAIiB,kBAAJ,EACA;AACC;AACA,MAAIR,MAAMK,OAAN,IAAiBD,gBAAjB,IACHI,uBAAuB5B,eAAewB,gBAAf,CADxB,EAEA;AACC,UAAOJ,MAAMO,KAAb;AACA;;AAEDH,qBAAmBhB,mCAAmCoB,kBAAnC,EAAuDL,QAAvD,CAAnB;AACA;;AAED,KAAI,CAACC,gBAAL,EACA;AACC,SAAOJ,MAAMO,KAAb;AACA;;AAED,SAAQN,WAAR;AAEC,OAAK,eAAL;AACC,OAAI,CAACV,MAAL,EACA;AACC,iBAAWX,eAAewB,gBAAf,CAAX;AACA;AACD,OAAMK,kBAAkBC,uBAAuBnB,MAAvB,EAA+B,eAA/B,EAAgD,KAAhD,EAAuDa,gBAAvD,CAAxB;AACA,OAAMO,6BAA2B/B,eAAewB,gBAAf,CAA3B,SAA+DK,eAArE;AACA,OAAIT,MAAMY,GAAN,IAAaZ,MAAMY,GAAN,KAAc,CAA/B,EACA;AACC,WAAOV,QAAQZ,eAAR,CAAwBqB,oBAAxB,EAA8CX,MAAMY,GAApD,CAAP;AACA;AACD,UAAOD,oBAAP;;AAED,OAAK,OAAL;AACA;AACA,OAAK,yBAAL;AACC;AACA,gBAAW/B,eAAewB,gBAAf,CAAX,GAA8CJ,MAAMO,KAApD;;AAED,OAAK,SAAL;AACC,gBAAW3B,eAAewB,gBAAf,CAAX,GAA8CJ,MAAMO,KAApD,IAA6DP,MAAMY,GAAN,IAAaZ,MAAMY,GAAN,KAAc,CAA5B,GAAiC,UAAUZ,MAAMY,GAAjD,GAAuD,EAAnH;;AAED,OAAK,UAAL;AACC,OAAI,CAACrB,MAAL,EACA;AACC,WAAO,EAAP;AACA;AACD,OAAMsB,mBAAmBH,uBAAuBnB,MAAvB,EAA+B,UAA/B,EAA2C,KAA3C,EAAkDa,gBAAlD,CAAzB;AACA,OAAIJ,MAAMY,GAAN,IAAaZ,MAAMY,GAAN,KAAc,CAA/B,EACA;AACC,WAAOV,QAAQZ,eAAR,CAAwBuB,gBAAxB,EAA0Cb,MAAMY,GAAhD,CAAP;AACA;AACD,UAAOC,gBAAP;AAlCF;AAoCA;;AAED;AACA;AACA;AACA;AACA,OAAO,IAAMC,sBAAsB,QAA5B;;AAEP,OAAO,SAASC,mCAAT,CAA6CxB,MAA7C,EAAqDE,MAArD,EAA6DuB,aAA7D,EAA4EC,uBAA5E,EAAqGb,gBAArG,EACP;AACC,KAAMc,yBAAyB,IAAIC,MAAJ,CAAWrC,mBAAmBW,MAAnB,CAAX,CAA/B;;AAEA,KAAM2B,kCAAkCnC,2CAA2CQ,MAA3C,EAAmDW,gBAAnD,CAAxC;;AAEA;AACA;AACA;AACA;AACA,KAAMiB,iCAAiC,CAACD,+BAAD,IACrCA,mCAAmClC,uDAAuDO,MAAvD,EAA+DW,gBAA/D,CAAnC,IAAuH,CAACa,uBAD1H;;AAGA,KAAI,CAACD,aAAD,IAAkB,CAACK,8BAAvB,EACA;AACC,SAAO9B,OAAO+B,OAAP,CAENJ,sBAFM,EAGNnC,kBAAkBU,MAAlB,EAA0B6B,OAA1B,CAECR,mBAFD,EAGCM,+BAHD,CAHM,CAAP;AASA;;AAED,KAAMG,mBAAmBhC,OAAO+B,OAAP,CAExBJ,sBAFwB,EAGxBF,gBAAgB7B,gCAAgCM,MAAhC,CAAhB,GAA0DV,kBAAkBU,MAAlB,CAHlC,CAAzB;;AAMA,KAAIuB,aAAJ,EACA;AACC,SAAOQ,6BAA6BD,gBAA7B,CAAP;AACA;;AAED,QAAOA,gBAAP;AACA;;AAED,OAAO,SAASb,sBAAT,CAAgCnB,MAAhC,EAAwCkC,SAAxC,EAAmDR,uBAAnD,EAA4Eb,gBAA5E,EACP;AACC,KAAMX,SAASiC,yBAAyB7C,YAAYuB,gBAAZ,CAAzB,EAAwDb,MAAxD,CAAf;;AAEA,KAAI,CAACE,MAAL,EACA;AACC,SAAOF,MAAP;AACA;;AAED,QAAOwB,oCAAoCxB,MAApC,EAA4CE,MAA5C,EAAoDgC,cAAc,eAAlE,EAAmFR,uBAAnF,EAA4Gb,gBAA5G,CAAP;AACA;;AAED,OAAO,SAASsB,wBAAT,CAAkCC,iBAAlC,EAAqDlB,eAArD,EACP;AAAA;AAAA;AAAA;;AAAA;AACC,oCAAqBkB,iBAArB,4GACA;AAAA,OADWlC,OACX;;AACC;AACA,OAAIT,mCAAmCS,OAAnC,EAA2CmC,MAA3C,GAAoD,CAAxD,EACA;AACC;AACA,QAAMC,8BAA8B7C,mCAAmCS,OAAnC,EAA2CT,mCAAmCS,OAAnC,EAA2CmC,MAA3C,GAAoD,CAA/F,CAApC;;AAEA;AACA,QAAInB,gBAAgBqB,MAAhB,CAAuBD,2BAAvB,MAAwD,CAA5D,EACA;AACC;AACA;AACD;;AAED;AACA,OAAIpD,iBAAiBgC,eAAjB,EAAkC,IAAIU,MAAJ,CAAWrC,mBAAmBW,OAAnB,CAAX,CAAlC,CAAJ,EACA;AACC,WAAOA,OAAP;AACA;AACD;AArBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBC;;AAED;AACA;AACA;AACA;AACA,OAAO,SAAS+B,4BAAT,CAAsCO,KAAtC,EACP;AACC,QAAOA,MAAMT,OAAN,CAAc,IAAIH,MAAJ,OAAexC,iBAAf,SAAsC,GAAtC,CAAd,EAA0D,GAA1D,EAA+DqD,IAA/D,EAAP;AACA;;AAED;AACA,SAASjC,kBAAT,GACA;AAAA,KAD4BL,KAC5B,uEADoC,EACpC;AAAA,KADwCC,KACxC;AAAA,KAD+CC,KAC/C;AAAA,KADsDC,KACtD;AAAA,KAD6DC,KAC7D;;AACC,KAAIE,cAAJ;AACA,KAAIC,oBAAJ;AACA,KAAIC,gBAAJ;AACA,KAAIC,iBAAJ;;AAEA;;AAEA;AACA;AACA,KAAI,OAAOT,KAAP,KAAiB,QAArB,EACA;AACC;AACA;AACA,MAAI,OAAOE,KAAP,KAAiB,QAArB,EACA;AACC;AACAI,WACA;AACCO,WAAUb,KADX;AAECW,aAAUV;AAFX,IADA;;AAMAM,iBAAcL,KAAd;;AAEA,OAAIE,KAAJ,EACA;AACCI,cAAWL,KAAX;AACAM,eAAWL,KAAX;AACA,IAJD,MAMA;AACCK,eAAWN,KAAX;AACA;AACD;AACD;AACA;AAtBA,OAwBA;AACC;AACAG,YACA;AACCO,YAAQb;AADT,KADA;;AAKA,QAAI,OAAOC,KAAP,KAAiB,QAArB,EACA;AACC,WAAM,IAAIsC,KAAJ,CAAU,gDAAV,CAAN;AACA;;AAEDhC,kBAAcN,KAAd;;AAEA,QAAIE,KAAJ,EACA;AACCK,eAAWN,KAAX;AACAO,gBAAWN,KAAX;AACA,KAJD,MAMA;AACCM,gBAAWP,KAAX;AACA;AACD;AACD;AACD;AACA;AAtDA,MAwDA;AACCI,WAAcN,KAAd;AACAO,iBAAcN,KAAd;;AAEA,OAAIE,KAAJ,EACA;AACCK,cAAWN,KAAX;AACAO,eAAWN,KAAX;AACA,IAJD,MAMA;AACCM,eAAWP,KAAX;AACA;AACD;;AAED;AACA,KAAI,CAACO,QAAL,EACA;AACC,QAAM,IAAI8B,KAAJ,CAAU,sBAAV,CAAN;AACA;;AAED;AACA,SAAQhC,WAAR;AAEC,OAAK,eAAL;AACA,OAAK,OAAL;AACA;AACA,OAAK,yBAAL;AACA,OAAK,UAAL;AACA,OAAK,SAAL;AACC;AACD;AACC,SAAM,IAAIgC,KAAJ,0DAAiEhC,WAAjE,OAAN;AAVF;;AAaA;AACA,KAAIC,OAAJ,EACA;AACCA,yBAAeb,eAAf,EAAmCa,OAAnC;AACA,EAHD,MAKA;AACCA,YAAUb,eAAV;AACA;;AAED,QAAO,EAAEW,YAAF,EAASC,wBAAT,EAAsBC,gBAAtB,EAA+BC,kBAA/B,EAAP;AACA","file":"format.js","sourcesContent":["// This is a port of Google Android `libphonenumber`'s\r\n// `phonenumberutil.js` of 17th November, 2016.\r\n//\r\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\r\n\r\nimport { matches_entirely } from './common'\r\n\r\nimport\r\n{\r\n\tparse_phone_number_and_country_phone_code,\r\n\tVALID_PUNCTUATION\r\n}\r\nfrom './parse'\r\n\r\nimport\r\n{\r\n\tget_phone_code,\r\n\tget_formats,\r\n\tget_format_pattern,\r\n\tget_format_format,\r\n\tget_format_leading_digits_patterns,\r\n\tget_format_national_prefix_formatting_rule,\r\n\tget_format_national_prefix_is_optional_when_formatting,\r\n\tget_format_international_format,\r\n\tget_metadata_by_country_phone_code\r\n}\r\nfrom './metadata'\r\n\r\nconst default_options =\r\n{\r\n\tformatExtension: (number, extension) => `${number} ext. ${extension}`\r\n}\r\n\r\n// Formats a phone number\r\n//\r\n// Example use cases:\r\n//\r\n// ```js\r\n// format('8005553535', 'RU', 'International')\r\n// format('8005553535', 'RU', 'International', metadata)\r\n// format({ phone: '8005553535', country: 'RU' }, 'International')\r\n// format({ phone: '8005553535', country: 'RU' }, 'International', metadata)\r\n// format('+78005553535', 'National')\r\n// format('+78005553535', 'National', metadata)\r\n// ```\r\n//\r\nexport default function format(arg_1, arg_2, arg_3, arg_4, arg_5)\r\n{\r\n\tconst\r\n\t{\r\n\t\tinput,\r\n\t\tformat_type,\r\n\t\toptions,\r\n\t\tmetadata\r\n\t}\r\n\t= sort_out_arguments(arg_1, arg_2, arg_3, arg_4, arg_5)\r\n\r\n\tlet country_metadata\r\n\r\n\tif (input.country)\r\n\t{\r\n\t\tcountry_metadata = metadata.countries[input.country]\r\n\t}\r\n\r\n\tconst { country_phone_code, number } = parse_phone_number_and_country_phone_code(input.phone, metadata)\r\n\r\n\tif (country_phone_code)\r\n\t{\r\n\t\t// Check country restriction\r\n\t\tif (input.country && country_metadata &&\r\n\t\t\tcountry_phone_code !== get_phone_code(country_metadata))\r\n\t\t{\r\n\t\t\treturn input.phone\r\n\t\t}\r\n\r\n\t\tcountry_metadata = get_metadata_by_country_phone_code(country_phone_code, metadata)\r\n\t}\r\n\r\n\tif (!country_metadata)\r\n\t{\r\n\t\treturn input.phone\r\n\t}\r\n\r\n\tswitch (format_type)\r\n\t{\r\n\t\tcase 'International':\r\n\t\t\tif (!number)\r\n\t\t\t{\r\n\t\t\t\treturn `+${get_phone_code(country_metadata)}`\r\n\t\t\t}\r\n\t\t\tconst national_number = format_national_number(number, 'International', false, country_metadata)\r\n\t\t\tconst international_number = `+${get_phone_code(country_metadata)} ${national_number}`\r\n\t\t\tif (input.ext || input.ext === 0)\r\n\t\t\t{\r\n\t\t\t\treturn options.formatExtension(international_number, input.ext)\r\n\t\t\t}\r\n\t\t\treturn international_number\r\n\r\n\t\tcase 'E.164':\r\n\t\t// \"International_plaintext\" is deprecated\r\n\t\tcase 'International_plaintext':\r\n\t\t\t// `E.164` doesn't define \"phone number extensions\".\r\n\t\t\treturn `+${get_phone_code(country_metadata)}${input.phone}`\r\n\r\n\t\tcase 'RFC3966':\r\n\t\t\treturn `+${get_phone_code(country_metadata)}${input.phone}${(input.ext || input.ext === 0) ? ';ext=' + input.ext : ''}`\r\n\r\n\t\tcase 'National':\r\n\t\t\tif (!number)\r\n\t\t\t{\r\n\t\t\t\treturn ''\r\n\t\t\t}\r\n\t\t\tconst _national_number = format_national_number(number, 'National', false, country_metadata)\r\n\t\t\tif (input.ext || input.ext === 0)\r\n\t\t\t{\r\n\t\t\t\treturn options.formatExtension(_national_number, input.ext)\r\n\t\t\t}\r\n\t\t\treturn _national_number\r\n\t}\r\n}\r\n\r\n// This was originally set to $1 but there are some countries for which the\r\n// first group is not used in the national pattern (e.g. Argentina) so the $1\r\n// group does not match correctly.  Therefore, we use \\d, so that the first\r\n// group actually used in the pattern will be matched.\r\nexport const FIRST_GROUP_PATTERN = /(\\$\\d)/\r\n\r\nexport function format_national_number_using_format(number, format, international, enforce_national_prefix, country_metadata)\r\n{\r\n\tconst format_pattern_matcher = new RegExp(get_format_pattern(format))\r\n\r\n\tconst national_prefix_formatting_rule = get_format_national_prefix_formatting_rule(format, country_metadata)\r\n\r\n\t// National prefix is omitted if there's no national prefix formatting rule\r\n\t// set for this country, or when this rule is set but\r\n\t// national prefix is optional for this phone number format\r\n\t// (and it is not enforced explicitly)\r\n\tconst national_prefix_may_be_omitted = !national_prefix_formatting_rule ||\r\n\t\t(national_prefix_formatting_rule && get_format_national_prefix_is_optional_when_formatting(format, country_metadata) && !enforce_national_prefix)\r\n\r\n\tif (!international && !national_prefix_may_be_omitted)\r\n\t{\r\n\t\treturn number.replace\r\n\t\t(\r\n\t\t\tformat_pattern_matcher,\r\n\t\t\tget_format_format(format).replace\r\n\t\t\t(\r\n\t\t\t\tFIRST_GROUP_PATTERN,\r\n\t\t\t\tnational_prefix_formatting_rule\r\n\t\t\t)\r\n\t\t)\r\n\t}\r\n\r\n\tconst formatted_number = number.replace\r\n\t(\r\n\t\tformat_pattern_matcher,\r\n\t\tinternational ? get_format_international_format(format) : get_format_format(format)\r\n\t)\r\n\r\n\tif (international)\r\n\t{\r\n\t\treturn local_to_international_style(formatted_number)\r\n\t}\r\n\r\n\treturn formatted_number\r\n}\r\n\r\nexport function format_national_number(number, format_as, enforce_national_prefix, country_metadata)\r\n{\r\n\tconst format = choose_format_for_number(get_formats(country_metadata), number)\r\n\r\n\tif (!format)\r\n\t{\r\n\t\treturn number\r\n\t}\r\n\r\n\treturn format_national_number_using_format(number, format, format_as === 'International', enforce_national_prefix, country_metadata)\r\n}\r\n\r\nexport function choose_format_for_number(available_formats, national_number)\r\n{\r\n\tfor (const format of available_formats)\r\n\t{\r\n\t\t// Validate leading digits\r\n\t\tif (get_format_leading_digits_patterns(format).length > 0)\r\n\t\t{\r\n\t\t\t// The last leading_digits_pattern is used here, as it is the most detailed\r\n\t\t\tconst last_leading_digits_pattern = get_format_leading_digits_patterns(format)[get_format_leading_digits_patterns(format).length - 1]\r\n\r\n\t\t\t// If leading digits don't match then move on to the next phone number format\r\n\t\t\tif (national_number.search(last_leading_digits_pattern) !== 0)\r\n\t\t\t{\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Check that the national number matches the phone number format regular expression\r\n\t\tif (matches_entirely(national_number, new RegExp(get_format_pattern(format))))\r\n\t\t{\r\n\t\t\treturn format\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Removes brackets and replaces dashes with spaces.\r\n//\r\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\r\n//\r\nexport function local_to_international_style(local)\r\n{\r\n\treturn local.replace(new RegExp(`[${VALID_PUNCTUATION}]+`, 'g'), ' ').trim()\r\n}\r\n\r\n// Sort out arguments\r\nfunction sort_out_arguments(arg_1 = '', arg_2, arg_3, arg_4, arg_5)\r\n{\r\n\tlet input\r\n\tlet format_type\r\n\tlet options\r\n\tlet metadata\r\n\r\n\t// Sort out arguments.\r\n\r\n\t// If the phone number is passed as a string.\r\n\t// `format('8005553535', ...)`.\r\n\tif (typeof arg_1 === 'string')\r\n\t{\r\n\t\t// If country code is supplied.\r\n\t\t// `format('8005553535', 'RU', 'National', [options], metadata)`.\r\n\t\tif (typeof arg_3 === 'string')\r\n\t\t{\r\n\t\t\t// Will be `parse()`d later in code\r\n\t\t\tinput =\r\n\t\t\t{\r\n\t\t\t\tphone   : arg_1,\r\n\t\t\t\tcountry : arg_2\r\n\t\t\t}\r\n\r\n\t\t\tformat_type = arg_3\r\n\r\n\t\t\tif (arg_5)\r\n\t\t\t{\r\n\t\t\t\toptions  = arg_4\r\n\t\t\t\tmetadata = arg_5\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmetadata = arg_4\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Just an international phone number is supplied\r\n\t\t// `format('+78005553535', 'National', [options], metadata)`.\r\n\t\telse\r\n\t\t{\r\n\t\t\t// Will be `parse()`d later in code\r\n\t\t\tinput =\r\n\t\t\t{\r\n\t\t\t\tphone : arg_1\r\n\t\t\t}\r\n\r\n\t\t\tif (typeof arg_2 !== 'string')\r\n\t\t\t{\r\n\t\t\t\tthrow new Error('Format type argument not passed for `format()`')\r\n\t\t\t}\r\n\r\n\t\t\tformat_type = arg_2\r\n\r\n\t\t\tif (arg_4)\r\n\t\t\t{\r\n\t\t\t\toptions  = arg_3\r\n\t\t\t\tmetadata = arg_4\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmetadata = arg_3\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t// If the phone number is passed as a parsed number object.\r\n\t// `format({ phone: '8005553535', country: 'RU' }, 'National', [options], metadata)`.\r\n\telse\r\n\t{\r\n\t\tinput       = arg_1\r\n\t\tformat_type = arg_2\r\n\r\n\t\tif (arg_4)\r\n\t\t{\r\n\t\t\toptions  = arg_3\r\n\t\t\tmetadata = arg_4\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tmetadata = arg_3\r\n\t\t}\r\n\t}\r\n\r\n\t// Metadata is required.\r\n\tif (!metadata)\r\n\t{\r\n\t\tthrow new Error('Metadata is required')\r\n\t}\r\n\r\n\t// Validate `format_type`.\r\n\tswitch (format_type)\r\n\t{\r\n\t\tcase 'International':\r\n\t\tcase 'E.164':\r\n\t\t// \"International_plaintext\" is deprecated\r\n\t\tcase 'International_plaintext':\r\n\t\tcase 'National':\r\n\t\tcase 'RFC3966':\r\n\t\t\tbreak\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unknown format type argument passed to \"format()\": \"${format_type}\"`)\r\n\t}\r\n\r\n\t// Apply default options.\r\n\tif (options)\r\n\t{\r\n\t\toptions = { ...default_options, ...options }\r\n\t}\r\n\telse\r\n\t{\r\n\t\toptions = default_options\r\n\t}\r\n\r\n\treturn { input, format_type, options, metadata }\r\n}"]}