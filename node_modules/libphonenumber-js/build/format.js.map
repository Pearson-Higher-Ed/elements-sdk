{"version":3,"sources":["../source/format.js"],"names":["format","format_national_number_using_format","format_national_number","choose_format_for_number","local_to_international_style","default_options","formatExtension","number","extension","arg_1","arg_2","arg_3","arg_4","arg_5","sort_out_arguments","input","format_type","options","metadata","country_metadata","country","countries","phone","country_phone_code","national_number","international_number","ext","_national_number","FIRST_GROUP_PATTERN","international","enforce_national_prefix","format_pattern_matcher","RegExp","national_prefix_formatting_rule","national_prefix_may_be_omitted","replace","formatted_number","format_as","available_formats","length","last_leading_digits_pattern","search","local","trim","Error"],"mappings":"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","file":"format.js","sourcesContent":["// This is a port of Google Android `libphonenumber`'s\r\n// `phonenumberutil.js` of 17th November, 2016.\r\n//\r\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\r\n\r\nimport { matches_entirely } from './common'\r\n\r\nimport\r\n{\r\n\tparse_phone_number_and_country_phone_code,\r\n\tVALID_PUNCTUATION\r\n}\r\nfrom './parse'\r\n\r\nimport\r\n{\r\n\tget_phone_code,\r\n\tget_formats,\r\n\tget_format_pattern,\r\n\tget_format_format,\r\n\tget_format_leading_digits_patterns,\r\n\tget_format_national_prefix_formatting_rule,\r\n\tget_format_national_prefix_is_optional_when_formatting,\r\n\tget_format_international_format,\r\n\tget_metadata_by_country_phone_code\r\n}\r\nfrom './metadata'\r\n\r\nconst default_options =\r\n{\r\n\tformatExtension: (number, extension) => `${number} ext. ${extension}`\r\n}\r\n\r\n// Formats a phone number\r\n//\r\n// Example use cases:\r\n//\r\n// ```js\r\n// format('8005553535', 'RU', 'International')\r\n// format('8005553535', 'RU', 'International', metadata)\r\n// format({ phone: '8005553535', country: 'RU' }, 'International')\r\n// format({ phone: '8005553535', country: 'RU' }, 'International', metadata)\r\n// format('+78005553535', 'National')\r\n// format('+78005553535', 'National', metadata)\r\n// ```\r\n//\r\nexport default function format(arg_1, arg_2, arg_3, arg_4, arg_5)\r\n{\r\n\tconst\r\n\t{\r\n\t\tinput,\r\n\t\tformat_type,\r\n\t\toptions,\r\n\t\tmetadata\r\n\t}\r\n\t= sort_out_arguments(arg_1, arg_2, arg_3, arg_4, arg_5)\r\n\r\n\tlet country_metadata\r\n\r\n\tif (input.country)\r\n\t{\r\n\t\tcountry_metadata = metadata.countries[input.country]\r\n\t}\r\n\r\n\tconst { country_phone_code, number } = parse_phone_number_and_country_phone_code(input.phone, metadata)\r\n\r\n\tif (country_phone_code)\r\n\t{\r\n\t\t// Check country restriction\r\n\t\tif (input.country && country_metadata &&\r\n\t\t\tcountry_phone_code !== get_phone_code(country_metadata))\r\n\t\t{\r\n\t\t\treturn input.phone\r\n\t\t}\r\n\r\n\t\tcountry_metadata = get_metadata_by_country_phone_code(country_phone_code, metadata)\r\n\t}\r\n\r\n\tif (!country_metadata)\r\n\t{\r\n\t\treturn input.phone\r\n\t}\r\n\r\n\tswitch (format_type)\r\n\t{\r\n\t\tcase 'International':\r\n\t\t\tif (!number)\r\n\t\t\t{\r\n\t\t\t\treturn `+${get_phone_code(country_metadata)}`\r\n\t\t\t}\r\n\t\t\tconst national_number = format_national_number(number, 'International', false, country_metadata)\r\n\t\t\tconst international_number = `+${get_phone_code(country_metadata)} ${national_number}`\r\n\t\t\tif (input.ext || input.ext === 0)\r\n\t\t\t{\r\n\t\t\t\treturn options.formatExtension(international_number, input.ext)\r\n\t\t\t}\r\n\t\t\treturn international_number\r\n\r\n\t\tcase 'E.164':\r\n\t\t// \"International_plaintext\" is deprecated\r\n\t\tcase 'International_plaintext':\r\n\t\t\t// `E.164` doesn't define \"phone number extensions\".\r\n\t\t\treturn `+${get_phone_code(country_metadata)}${input.phone}`\r\n\r\n\t\tcase 'RFC3966':\r\n\t\t\treturn `+${get_phone_code(country_metadata)}${input.phone}${(input.ext || input.ext === 0) ? ';ext=' + input.ext : ''}`\r\n\r\n\t\tcase 'National':\r\n\t\t\tif (!number)\r\n\t\t\t{\r\n\t\t\t\treturn ''\r\n\t\t\t}\r\n\t\t\tconst _national_number = format_national_number(number, 'National', false, country_metadata)\r\n\t\t\tif (input.ext || input.ext === 0)\r\n\t\t\t{\r\n\t\t\t\treturn options.formatExtension(_national_number, input.ext)\r\n\t\t\t}\r\n\t\t\treturn _national_number\r\n\t}\r\n}\r\n\r\n// This was originally set to $1 but there are some countries for which the\r\n// first group is not used in the national pattern (e.g. Argentina) so the $1\r\n// group does not match correctly.  Therefore, we use \\d, so that the first\r\n// group actually used in the pattern will be matched.\r\nexport const FIRST_GROUP_PATTERN = /(\\$\\d)/\r\n\r\nexport function format_national_number_using_format(number, format, international, enforce_national_prefix, country_metadata)\r\n{\r\n\tconst format_pattern_matcher = new RegExp(get_format_pattern(format))\r\n\r\n\tconst national_prefix_formatting_rule = get_format_national_prefix_formatting_rule(format, country_metadata)\r\n\r\n\t// National prefix is omitted if there's no national prefix formatting rule\r\n\t// set for this country, or when this rule is set but\r\n\t// national prefix is optional for this phone number format\r\n\t// (and it is not enforced explicitly)\r\n\tconst national_prefix_may_be_omitted = !national_prefix_formatting_rule ||\r\n\t\t(national_prefix_formatting_rule && get_format_national_prefix_is_optional_when_formatting(format, country_metadata) && !enforce_national_prefix)\r\n\r\n\tif (!international && !national_prefix_may_be_omitted)\r\n\t{\r\n\t\treturn number.replace\r\n\t\t(\r\n\t\t\tformat_pattern_matcher,\r\n\t\t\tget_format_format(format).replace\r\n\t\t\t(\r\n\t\t\t\tFIRST_GROUP_PATTERN,\r\n\t\t\t\tnational_prefix_formatting_rule\r\n\t\t\t)\r\n\t\t)\r\n\t}\r\n\r\n\tconst formatted_number = number.replace\r\n\t(\r\n\t\tformat_pattern_matcher,\r\n\t\tinternational ? get_format_international_format(format) : get_format_format(format)\r\n\t)\r\n\r\n\tif (international)\r\n\t{\r\n\t\treturn local_to_international_style(formatted_number)\r\n\t}\r\n\r\n\treturn formatted_number\r\n}\r\n\r\nexport function format_national_number(number, format_as, enforce_national_prefix, country_metadata)\r\n{\r\n\tconst format = choose_format_for_number(get_formats(country_metadata), number)\r\n\r\n\tif (!format)\r\n\t{\r\n\t\treturn number\r\n\t}\r\n\r\n\treturn format_national_number_using_format(number, format, format_as === 'International', enforce_national_prefix, country_metadata)\r\n}\r\n\r\nexport function choose_format_for_number(available_formats, national_number)\r\n{\r\n\tfor (const format of available_formats)\r\n\t{\r\n\t\t// Validate leading digits\r\n\t\tif (get_format_leading_digits_patterns(format).length > 0)\r\n\t\t{\r\n\t\t\t// The last leading_digits_pattern is used here, as it is the most detailed\r\n\t\t\tconst last_leading_digits_pattern = get_format_leading_digits_patterns(format)[get_format_leading_digits_patterns(format).length - 1]\r\n\r\n\t\t\t// If leading digits don't match then move on to the next phone number format\r\n\t\t\tif (national_number.search(last_leading_digits_pattern) !== 0)\r\n\t\t\t{\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Check that the national number matches the phone number format regular expression\r\n\t\tif (matches_entirely(national_number, new RegExp(get_format_pattern(format))))\r\n\t\t{\r\n\t\t\treturn format\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Removes brackets and replaces dashes with spaces.\r\n//\r\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\r\n//\r\nexport function local_to_international_style(local)\r\n{\r\n\treturn local.replace(new RegExp(`[${VALID_PUNCTUATION}]+`, 'g'), ' ').trim()\r\n}\r\n\r\n// Sort out arguments\r\nfunction sort_out_arguments(arg_1 = '', arg_2, arg_3, arg_4, arg_5)\r\n{\r\n\tlet input\r\n\tlet format_type\r\n\tlet options\r\n\tlet metadata\r\n\r\n\t// Sort out arguments.\r\n\r\n\t// If the phone number is passed as a string.\r\n\t// `format('8005553535', ...)`.\r\n\tif (typeof arg_1 === 'string')\r\n\t{\r\n\t\t// If country code is supplied.\r\n\t\t// `format('8005553535', 'RU', 'National', [options], metadata)`.\r\n\t\tif (typeof arg_3 === 'string')\r\n\t\t{\r\n\t\t\t// Will be `parse()`d later in code\r\n\t\t\tinput =\r\n\t\t\t{\r\n\t\t\t\tphone   : arg_1,\r\n\t\t\t\tcountry : arg_2\r\n\t\t\t}\r\n\r\n\t\t\tformat_type = arg_3\r\n\r\n\t\t\tif (arg_5)\r\n\t\t\t{\r\n\t\t\t\toptions  = arg_4\r\n\t\t\t\tmetadata = arg_5\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmetadata = arg_4\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Just an international phone number is supplied\r\n\t\t// `format('+78005553535', 'National', [options], metadata)`.\r\n\t\telse\r\n\t\t{\r\n\t\t\t// Will be `parse()`d later in code\r\n\t\t\tinput =\r\n\t\t\t{\r\n\t\t\t\tphone : arg_1\r\n\t\t\t}\r\n\r\n\t\t\tif (typeof arg_2 !== 'string')\r\n\t\t\t{\r\n\t\t\t\tthrow new Error('Format type argument not passed for `format()`')\r\n\t\t\t}\r\n\r\n\t\t\tformat_type = arg_2\r\n\r\n\t\t\tif (arg_4)\r\n\t\t\t{\r\n\t\t\t\toptions  = arg_3\r\n\t\t\t\tmetadata = arg_4\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmetadata = arg_3\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t// If the phone number is passed as a parsed number object.\r\n\t// `format({ phone: '8005553535', country: 'RU' }, 'National', [options], metadata)`.\r\n\telse\r\n\t{\r\n\t\tinput       = arg_1\r\n\t\tformat_type = arg_2\r\n\r\n\t\tif (arg_4)\r\n\t\t{\r\n\t\t\toptions  = arg_3\r\n\t\t\tmetadata = arg_4\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tmetadata = arg_3\r\n\t\t}\r\n\t}\r\n\r\n\t// Metadata is required.\r\n\tif (!metadata)\r\n\t{\r\n\t\tthrow new Error('Metadata is required')\r\n\t}\r\n\r\n\t// Validate `format_type`.\r\n\tswitch (format_type)\r\n\t{\r\n\t\tcase 'International':\r\n\t\tcase 'E.164':\r\n\t\t// \"International_plaintext\" is deprecated\r\n\t\tcase 'International_plaintext':\r\n\t\tcase 'National':\r\n\t\tcase 'RFC3966':\r\n\t\t\tbreak\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unknown format type argument passed to \"format()\": \"${format_type}\"`)\r\n\t}\r\n\r\n\t// Apply default options.\r\n\tif (options)\r\n\t{\r\n\t\toptions = { ...default_options, ...options }\r\n\t}\r\n\telse\r\n\t{\r\n\t\toptions = default_options\r\n\t}\r\n\r\n\treturn { input, format_type, options, metadata }\r\n}"]}