{"version":3,"sources":["../source/metadata.js"],"names":["get_phone_code","get_national_number_pattern","get_formats","get_national_prefix","get_national_prefix_formatting_rule","get_national_prefix_for_parsing","get_national_prefix_transform_rule","get_national_prefix_is_optional_when_formatting","get_leading_digits","get_format_pattern","get_format_format","get_format_leading_digits_patterns","get_format_national_prefix_formatting_rule","get_format_national_prefix_is_optional_when_formatting","get_format_national_prefix_is_mandatory_when_formatting","get_format_uses_national_prefix","get_format_international_format","get_metadata_by_country_phone_code","get_types","get_type_fixed_line","get_type_mobile","get_type_toll_free","get_type_premium_rate","get_type_personal_number","get_type_voice_mail","get_type_uan","get_type_pager","get_type_voip","get_type_shared_cost","get_country_phone_code","country_metadata","national_prefix_for_parsing","format_array","national_prefix_formatting_rule","test","replace","country_phone_code","metadata","country_code","country_phone_code_to_countries","countries","get_type","index","undefined","country"],"mappings":"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","file":"metadata.js","sourcesContent":["export function get_phone_code(country_metadata)\r\n{\r\n\treturn country_metadata[0]\r\n}\r\n\r\nexport function get_national_number_pattern(country_metadata)\r\n{\r\n\treturn country_metadata[1]\r\n}\r\n\r\nexport function get_formats(country_metadata)\r\n{\r\n\treturn country_metadata[2] || []\r\n}\r\n\r\nexport function get_national_prefix(country_metadata)\r\n{\r\n\treturn country_metadata[3]\r\n}\r\n\r\nexport function get_national_prefix_formatting_rule(country_metadata)\r\n{\r\n\treturn country_metadata[4]\r\n}\r\n\r\nexport function get_national_prefix_for_parsing(country_metadata)\r\n{\r\n\tlet national_prefix_for_parsing = country_metadata[5]\r\n\r\n\t// If `national_prefix_for_parsing` is not set explicitly,\r\n\t// then infer it from `national_prefix` (if any)\r\n\tif (!national_prefix_for_parsing)\r\n\t{\r\n\t\tnational_prefix_for_parsing = get_national_prefix(country_metadata)\r\n\t}\r\n\r\n\treturn national_prefix_for_parsing\r\n}\r\n\r\nexport function get_national_prefix_transform_rule(country_metadata)\r\n{\r\n\treturn country_metadata[6]\r\n}\r\n\r\nexport function get_national_prefix_is_optional_when_formatting(country_metadata)\r\n{\r\n\treturn country_metadata[7]\r\n}\r\n\r\nexport function get_leading_digits(country_metadata)\r\n{\r\n\treturn country_metadata[8]\r\n}\r\n\r\nexport function get_format_pattern(format_array)\r\n{\r\n\treturn format_array[0]\r\n}\r\n\r\nexport function get_format_format(format_array)\r\n{\r\n\treturn format_array[1]\r\n}\r\n\r\nexport function get_format_leading_digits_patterns(format_array)\r\n{\r\n\treturn format_array[2] || []\r\n}\r\n\r\nexport function get_format_national_prefix_formatting_rule(format_array, country_metadata)\r\n{\r\n\treturn format_array[3] || get_national_prefix_formatting_rule(country_metadata)\r\n}\r\n\r\nexport function get_format_national_prefix_is_optional_when_formatting(format_array, country_metadata)\r\n{\r\n\treturn format_array[4] || get_national_prefix_is_optional_when_formatting(country_metadata)\r\n}\r\n\r\nexport function get_format_national_prefix_is_mandatory_when_formatting(format_array, country_metadata)\r\n{\r\n\tconst national_prefix_formatting_rule = get_format_national_prefix_formatting_rule(format_array, country_metadata)\r\n\r\n\t// National prefix is omitted if there's no national prefix formatting rule\r\n\t// set for this country, or when the national prefix formatting rule\r\n\t// contains no national prefix itself, or when this rule is set but\r\n\t// national prefix is optional for this phone number format\r\n\t// (and it is not enforced explicitly)\r\n\treturn national_prefix_formatting_rule &&\r\n\t\t// Check that national prefix formatting rule is not a dummy one.\r\n\t\t// Check that national prefix formatting rule actually has national prefix digit(s).\r\n\t\tget_format_uses_national_prefix(national_prefix_formatting_rule) &&\r\n\t\t// Or maybe national prefix is optional for this format\r\n\t\t!get_format_national_prefix_is_optional_when_formatting(format_array, country_metadata)\r\n}\r\n\r\n// Checks whether national prefix formatting rule contains national prefix\r\nexport function get_format_uses_national_prefix(national_prefix_formatting_rule)\r\n{\r\n\t// Check that national prefix formatting rule is not a dummy one\r\n\treturn national_prefix_formatting_rule !== '$1' &&\r\n\t\t// Check that national prefix formatting rule actually has national prefix digit(s)\r\n\t\t/\\d/.test(national_prefix_formatting_rule.replace('$1', ''))\r\n}\r\n\r\nexport function get_format_international_format(format_array)\r\n{\r\n\treturn format_array[5] || get_format_format(format_array)\r\n}\r\n\r\n// Formatting information for regions which share\r\n// a country calling code is contained by only one region\r\n// for performance reasons. For example, for NANPA region\r\n// (\"North American Numbering Plan Administration\",\r\n//  which includes USA, Canada, Cayman Islands, Bahamas, etc)\r\n// it will be contained in the metadata for `US`.\r\nexport function get_metadata_by_country_phone_code(country_phone_code, metadata)\r\n{\r\n\tconst country_code = metadata.country_phone_code_to_countries[country_phone_code][0]\r\n\treturn metadata.countries[country_code]\r\n}\r\n\r\nexport function get_types(country_metadata)\r\n{\r\n\treturn country_metadata[9]\r\n}\r\n\r\nfunction get_type(country_metadata, index)\r\n{\r\n\treturn get_types(country_metadata) ? get_types(country_metadata)[index] : undefined\r\n}\r\n\r\nexport function get_type_fixed_line(country_metadata)\r\n{\r\n\treturn get_type(country_metadata, 0)\r\n}\r\n\r\nexport function get_type_mobile(country_metadata)\r\n{\r\n\treturn get_type(country_metadata, 1)\r\n}\r\n\r\nexport function get_type_toll_free(country_metadata)\r\n{\r\n\treturn get_type(country_metadata, 2)\r\n}\r\n\r\nexport function get_type_premium_rate(country_metadata)\r\n{\r\n\treturn get_type(country_metadata, 3)\r\n}\r\n\r\nexport function get_type_personal_number(country_metadata)\r\n{\r\n\treturn get_type(country_metadata, 4)\r\n}\r\n\r\nexport function get_type_voice_mail(country_metadata)\r\n{\r\n\treturn get_type(country_metadata, 5)\r\n}\r\n\r\nexport function get_type_uan(country_metadata)\r\n{\r\n\treturn get_type(country_metadata, 6)\r\n}\r\n\r\nexport function get_type_pager(country_metadata)\r\n{\r\n\treturn get_type(country_metadata, 7)\r\n}\r\n\r\nexport function get_type_voip(country_metadata)\r\n{\r\n\treturn get_type(country_metadata, 8)\r\n}\r\n\r\nexport function get_type_shared_cost(country_metadata)\r\n{\r\n\treturn get_type(country_metadata, 9)\r\n}\r\n\r\nexport function get_country_phone_code(country, country_metadata)\r\n{\r\n\treturn get_phone_code(country_metadata[country])\r\n}"]}