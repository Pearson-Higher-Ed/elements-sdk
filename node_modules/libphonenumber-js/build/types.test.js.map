{"version":3,"sources":["../source/types.test.js"],"names":["should","get_number_type","parameters","push","apply","describe","it","equal","type","undefined","thrower","throw","something"],"mappings":";;;;;;AAAA;;;;AAGA;;;;AACA;;;;;;AAHA,eAAKA,MAAL;;AAKA,SAASC,eAAT,GACA;AAAA,mCAD4BC,UAC5B;AAD4BA,YAC5B;AAAA;;AACCA,YAAWC,IAAX;AACA,QAAO,gBAAuBC,KAAvB,CAA6B,IAA7B,EAAmCF,UAAnC,CAAP;AACA;;AAEDG,SAAS,iBAAT,EAA4B,YAC5B;AACCC,IAAG,iCAAH,EAAsC,YACtC;AACCL,kBAAgB,aAAhB,EAA+B,IAA/B,sBAA+CD,MAA/C,CAAsDO,KAAtD,CAA4D,WAA5D;AACAN,kBAAgB,YAAhB,EAA8B,IAA9B,sBAA8CD,MAA9C,CAAqDO,KAArD,CAA2D,WAA3D;AACAN,kBAAgB,YAAhB,EAA8B,IAA9B,sBAA8CD,MAA9C,CAAqDO,KAArD,CAA2D,YAA3D;AACAN,kBAAgB,YAAhB,EAA8B,IAA9B,sBAA8CD,MAA9C,CAAqDO,KAArD,CAA2D,QAA3D;AACAN,kBAAgB,YAAhB,EAA8B,IAA9B,sBAA8CD,MAA9C,CAAqDO,KAArD,CAA2D,cAA3D;;AAEAN,kBAAgB,YAAhB,EAA8B,IAA9B,sBAA8CD,MAA9C,CAAqDO,KAArD,CAA2D,sBAA3D;AACAN,kBAAgB,YAAhB,EAA8B,IAA9B,sBAA8CD,MAA9C,CAAqDO,KAArD,CAA2D,iBAA3D;AACA,EAVD;;AAYAD,IAAG,4DAAH,EAAiE,YACjE;AACC;AACA,EAHD;;AAKAA,IAAG,2BAAH,EAAgC,YAChC;AACC;AACAE,OAAKP,gBAAgBQ,SAAhB,CAAL,EAAiCT,MAAjC,CAAwCO,KAAxC,CAA8C,WAA9C;;AAEA;AACA,MAAMG,UAAU,SAAVA,OAAU;AAAA,UAAMT,iBAAN;AAAA,GAAhB;AACAS,UAAQV,MAAR,CAAeW,KAAf,CAAqB,UAArB;;AAEA;AACAH,OAAKP,gBAAgB,KAAhB,EAAuB,IAAvB,CAAL,EAAmCD,MAAnC,CAA0CO,KAA1C,CAAgD,WAAhD;;AAEA;AACAN,kBAAgB,WAAhB,EAA6B,IAA7B,EAAmCD,MAAnC,CAA0CO,KAA1C,CAAgD,QAAhD;AACA,EAdD;AAeA,CAlCD;;AAoCA,SAASC,IAAT,CAAcI,SAAd,EACA;AACC,eAAcA,SAAd,uDAAcA,SAAd;AACA","file":"types.test.js","sourcesContent":["import chai, { expect } from 'chai'\r\nchai.should()\r\n\r\nimport metadata from '../metadata.min'\r\nimport get_number_type_custom from '../source/types'\r\n\r\nfunction get_number_type(...parameters)\r\n{\r\n\tparameters.push(metadata)\r\n\treturn get_number_type_custom.apply(this, parameters)\r\n}\r\n\r\ndescribe('get_number_type', () =>\r\n{\r\n\tit('should infer phone number types', function()\r\n\t{\r\n\t\tget_number_type('88005553535', 'RU', metadata).should.equal('TOLL_FREE')\r\n\t\tget_number_type('8005553535', 'RU', metadata).should.equal('TOLL_FREE')\r\n\t\tget_number_type('4957777777', 'RU', metadata).should.equal('FIXED_LINE')\r\n\t\tget_number_type('9150000000', 'RU', metadata).should.equal('MOBILE')\r\n\t\tget_number_type('8030000000', 'RU', metadata).should.equal('PREMIUM_RATE')\r\n\r\n\t\tget_number_type('2133734253', 'US', metadata).should.equal('FIXED_LINE_OR_MOBILE')\r\n\t\tget_number_type('5002345678', 'US', metadata).should.equal('PERSONAL_NUMBER')\r\n\t})\r\n\r\n\tit('should return FIXED_LINE_OR_MOBILE when there is ambiguity', () =>\r\n\t{\r\n\t\t// (no such country in the metadata, therefore no unit test for this `if`)\r\n\t})\r\n\r\n\tit('should work in edge cases', function()\r\n\t{\r\n\t\t// No arguments\r\n\t\ttype(get_number_type(undefined)).should.equal('undefined')\r\n\r\n\t\t// No metadata\r\n\t\tconst thrower = () => get_number_type()\r\n\t\tthrower.should.throw('Metadata')\r\n\r\n\t\t// Invalid phone number\r\n\t\ttype(get_number_type('123', 'RU')).should.equal('undefined')\r\n\r\n\t\t// Numerical `value`\r\n\t\tget_number_type(89150000000, 'RU').should.equal('MOBILE')\r\n\t})\r\n})\r\n\r\nfunction type(something)\r\n{\r\n\treturn typeof something\r\n}"]}