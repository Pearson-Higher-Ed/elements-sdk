{"version":3,"sources":["../source/input controller.js"],"names":["Input_controller","get_input_element","parse","format","on_change","element","input","selection","text","value","slice","start","end","format_input_text","undefined","onCut","event","setTimeout","onPaste","erase_selection","onChange","onKeyDown","operation","preventDefault","caret","edit_result","format_result"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;IAEqBA,gB;AAEpB,2BAAYC,iBAAZ,EAA+BC,KAA/B,EAAsCC,MAAtC,EAA8CC,SAA9C,EACA;AAAA;;AAAA;;AACC,MAAI,OAAOH,iBAAP,KAA6B,UAAjC,EACA;AAAA;AACC,QAAMI,UAAUJ,iBAAhB;AACAA,wBAAoB;AAAA,YAAMI,OAAN;AAAA,KAApB;AAFD;AAGC;;AAED,OAAKJ,iBAAL,GAAyBA,iBAAzB;AACA,OAAKC,KAAL,GAAaA,KAAb;AACA,OAAKC,MAAL,GAAcA,MAAd;AACA,OAAKC,SAAL,GAAiBA,SAAjB;AACA;;AAED;AACA;;;AA4BA;AACA;AACA;AACA;;;;;;;AA8BA;kCACgBE,K,EAAOC,S,EACvB;AACC,OAAIC,OAAOF,MAAMG,KAAjB;AACAD,UAAOA,KAAKE,KAAL,CAAW,CAAX,EAAcH,UAAUI,KAAxB,IAAiCH,KAAKE,KAAL,CAAWH,UAAUK,GAArB,CAAxC;;AAEAN,SAAMG,KAAN,GAAcD,IAAd;AACA,8BAAiBF,KAAjB,EAAwBC,UAAUI,KAAlC;;AAEA,UAAO,KAAKE,iBAAL,EAAP;AACA;;AAED;;;;;;AAsCA;mCAEA;AACC;AACA,OAAMP,QAAQ,KAAKL,iBAAL,EAAd;;AAEA,UAAO,qBAAMK,MAAMG,KAAZ,EAAmBK,SAAnB,EAA8B,KAAKZ,KAAnC,CAAP;AACA;;;;;;;;MArHDa,K,GAAQ,UAACC,KAAD,EACR;AACCC,aAAW,MAAKJ,iBAAhB,EAAmC,CAAnC;AACA,E;;MAEDK,O,GAAU,UAACF,KAAD,EACV;AACC,MAAMV,QAAQ,MAAKL,iBAAL,EAAd;;AAEA,MAAMM,YAAY,uBAAaD,KAAb,CAAlB;;AAEA;AACA;AACA;AACA,MAAIC,SAAJ,EACA;AACC,SAAKY,eAAL,CAAqBb,KAArB,EAA4BC,SAA5B;AACA;;AAED,QAAKM,iBAAL;AACA,E;;MAEDO,Q,GAAW,UAACJ,KAAD,EACX;AACC,QAAKH,iBAAL;AACA,E;;MAMDQ,S,GAAY,UAACL,KAAD,EACZ;AACC,MAAMM,YAAY,uBAAaN,KAAb,CAAlB;;AAEA,UAAQM,SAAR;AAEC,QAAK,QAAL;AACA,QAAK,WAAL;AACC;AACAN,UAAMO,cAAN;;AAEA,QAAMjB,QAAQ,MAAKL,iBAAL,EAAd;;AAEA,QAAMM,YAAY,uBAAaD,KAAb,CAAlB;;AAEA;AACA;AACA;AACA,QAAIC,SAAJ,EACA;AACC,WAAKY,eAAL,CAAqBb,KAArB,EAA4BC,SAA5B;AACA,YAAO,MAAKM,iBAAL,EAAP;AACA;;AAED;AACA,WAAO,MAAKA,iBAAL,CAAuBS,SAAvB,CAAP;AArBF;AAuBA,E;;MAeDT,iB,GAAoB,UAACS,SAAD,EACpB;AACC;AACA,MAAMhB,QAAQ,MAAKL,iBAAL,EAAd;;AAFD,eAIwB,qBAAMK,MAAMG,KAAZ,EAAmB,2BAAiBH,KAAjB,CAAnB,EAA4C,MAAKJ,KAAjD,CAJxB;AAAA,MAIOO,KAJP,UAIOA,KAJP;AAAA,MAIce,KAJd,UAIcA,KAJd;;AAMC;;;AACA,MAAIF,SAAJ,EACA;AACC,OAAMG,cAAc,oBAAKhB,KAAL,EAAYe,KAAZ,EAAmBF,SAAnB,CAApB;;AAEAb,WAAQgB,YAAYhB,KAApB;AACAe,WAAQC,YAAYD,KAApB;AACA;;AAED;AACA;;AAEA,MAAME,gBAAgB,sBAAOjB,KAAP,EAAce,KAAd,EAAqB,MAAKrB,MAA1B,CAAtB;;AAEA,MAAMK,OAAOkB,cAAclB,IAA3B;AACAgB,UAAaE,cAAcF,KAA3B;;AAEA;AACA;AACA;AACA;AACAlB,QAAMG,KAAN,GAAcD,IAAd;AACA;AACA,6BAAiBF,KAAjB,EAAwBkB,KAAxB;;AAEA;AACA;AACA,QAAKpB,SAAL,CAAeK,KAAf;AACA,E;;;kBA9HmBT,gB","file":"input controller.js","sourcesContent":["import edit   from './edit'\nimport parse  from './parse'\nimport format from './format'\n\nimport { getSelection, getOperation, getCaretPosition, setCaretPosition } from './dom'\n\nexport default class Input_controller\n{\n\tconstructor(get_input_element, parse, format, on_change)\n\t{\n\t\tif (typeof get_input_element !== 'function')\n\t\t{\n\t\t\tconst element = get_input_element\n\t\t\tget_input_element = () => element\n\t\t}\n\n\t\tthis.get_input_element = get_input_element\n\t\tthis.parse = parse\n\t\tthis.format = format\n\t\tthis.on_change = on_change\n\t}\n\n\t// Special handling for \"Cut\" event because\n\t// it wouldn't copy to clipboard otherwise.\n\tonCut = (event) =>\n\t{\n\t\tsetTimeout(this.format_input_text, 0)\n\t}\n\n\tonPaste = (event) =>\n\t{\n\t\tconst input = this.get_input_element()\n\n\t\tconst selection = getSelection(input)\n\n\t\t// If selection is made,\n\t\t// just erase the selected text\n\t\t// prior to pasting\n\t\tif (selection)\n\t\t{\n\t\t\tthis.erase_selection(input, selection)\n\t\t}\n\n\t\tthis.format_input_text()\n\t}\n\n\tonChange = (event) =>\n\t{\n\t\tthis.format_input_text()\n\t}\n\n\t// Intercepts \"Delete\" and \"Backspace\" keys\n\t// (hitting \"Delete\" or \"Backspace\"\n\t//  at any caret position should always result in\n\t//  erasing a digit)\n\tonKeyDown = (event) =>\n\t{\n\t\tconst operation = getOperation(event)\n\n\t\tswitch (operation)\n\t\t{\n\t\t\tcase 'Delete':\n\t\t\tcase 'Backspace':\n\t\t\t\t// Intercept this operation and perform it manually.\n\t\t\t\tevent.preventDefault()\n\n\t\t\t\tconst input = this.get_input_element()\n\n\t\t\t\tconst selection = getSelection(input)\n\n\t\t\t\t// If selection is made,\n\t\t\t\t// just erase the selected text,\n\t\t\t\t// and don't apply any more operations to it.\n\t\t\t\tif (selection)\n\t\t\t\t{\n\t\t\t\t\tthis.erase_selection(input, selection)\n\t\t\t\t\treturn this.format_input_text()\n\t\t\t\t}\n\n\t\t\t\t// Else, perform the (character erasing) operation manually\n\t\t\t\treturn this.format_input_text(operation)\n\t\t}\n\t}\n\n\t// Erases the selected text inside an `<input/>`\n\terase_selection(input, selection)\n\t{\n\t\tlet text = input.value\n\t\ttext = text.slice(0, selection.start) + text.slice(selection.end)\n\n\t\tinput.value = text\n\t\tsetCaretPosition(input, selection.start)\n\n\t\treturn this.format_input_text()\n\t}\n\n\t// Formats <input/> textual value as a phone number\n\tformat_input_text = (operation) =>\n\t{\n\t\t// <input/> DOM element\n\t\tconst input = this.get_input_element()\n\n\t\tlet { value, caret } = parse(input.value, getCaretPosition(input), this.parse)\n\n\t\t// Apply the pending operation to the <input/> textual value (if any)\n\t\tif (operation)\n\t\t{\n\t\t\tconst edit_result = edit(value, caret, operation)\n\n\t\t\tvalue = edit_result.value\n\t\t\tcaret = edit_result.caret\n\t\t}\n\n\t\t// Format the <input/> textual value as a phone number\n\t\t// (and reposition the caret accordingly)\n\n\t\tconst format_result = format(value, caret, this.format)\n\n\t\tconst text = format_result.text\n\t\tcaret      = format_result.caret\n\n\t\t// Set <input/> textual value manually to also set caret position\n\t\t// and prevent React from resetting the caret position later\n\t\t// inside subsequent `render()`.\n\t\t// Doesn't work for custom `inputComponent`s for some reason.\n\t\tinput.value = text\n\t\t// Set caret position (with the neccessary adjustments)\n\t\tsetCaretPosition(input, caret)\n\n\t\t// <input/> textual value may have been changed,\n\t\t// so `value` may have been changed too.\n\t\tthis.on_change(value)\n\t}\n\n\t// Parses `<input/>` text\n\tgetParsedValue()\n\t{\n\t\t// <input/> DOM element\n\t\tconst input = this.get_input_element()\n\n\t\treturn parse(input.value, undefined, this.parse)\n\t}\n}"]}