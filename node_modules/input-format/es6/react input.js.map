{"version":3,"sources":["../source/react input.js"],"names":["React","PropTypes","ReactDOM","Input_controller","ReactInput","props","store_instance","instance","input","get_input_element","findDOMNode","on_blur","event","onBlur","_event","target","value","input_controller","getParsedValue","stopPropagation","preventDefault","on_key_down","onKeyDown","parse","format","onChange","inputComponent","rest","createElement","ref","is_empty","text","onPaste","onCut","focus","Component","propTypes","func","isRequired","string","type","defaultProps","undefined"],"mappings":"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","file":"react input.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport ReactDOM from 'react-dom'\n\nimport Input_controller from './input controller'\n\n// Usage:\n//\n// <ReactInput\n// \tvalue={this.state.phone}\n// \tonChange={phone => this.setState({ phone })}\n// \tparse={character => character}\n// \tformat={value => ({ text: value, template: 'xxxxxxxx' })}/>\n//\nexport default class ReactInput extends React.Component\n{\n\tstatic propTypes =\n\t{\n\t\t// Parses a single characher of `<input/>` text\n\t\tparse  : PropTypes.func.isRequired,\n\n\t\t// Formats `value` into `<input/>` text\n\t\tformat : PropTypes.func.isRequired,\n\n\t\t// Renders `<input/>` by default\n\t\tinputComponent : PropTypes.string.isRequired,\n\n\t\t// `<input/>` `type` attribute\n\t\ttype : PropTypes.string.isRequired,\n\n\t\t// Is parsed from <input/> text\n\t\tvalue  : PropTypes.string,\n\n\t\t// This handler is called each time `<input/>` text is changed\n\t\tonChange : PropTypes.func.isRequired,\n\n\t\t// This `onBlur` interceptor is a workaround for `redux-form`,\n\t\t// so that it gets the parsed `value` in its `onBlur` handler,\n\t\t// not the formatted text.\n\t\tonBlur : PropTypes.func,\n\n\t\t// Passthrough\n\t\tonKeyDown : PropTypes.func\n\t}\n\n\tstatic defaultProps =\n\t{\n\t\t// Renders `<input/>` by default\n\t\tinputComponent : 'input',\n\n\t\t// `<input/>` `type` attribute\n\t\ttype : 'text'\n\t}\n\n\tconstructor(props)\n\t{\n\t\tsuper(props)\n\n\t\tconst { parse, format, onChange } = this.props\n\n\t\tthis.input_controller = new Input_controller(this.get_input_element, parse, format, onChange)\n\t}\n\n\tstore_instance = (instance) =>\n\t{\n\t\tthis.input = instance\n\t}\n\n\trender()\n\t{\n\t\tconst\n\t\t{\n\t\t\tvalue,\n\t\t\tparse,\n\t\t\tformat,\n\t\t\tinputComponent,\n\t\t\t...rest\n\t\t}\n\t\t= this.props\n\n\t\t// Non-string `inputComponent`s would work in this case\n\t\t// but it would also introduce a caret reset bug:\n\t\t// the caret position would reset on each input.\n\t\t// The origins of this bug are unknown, they may be\n\t\t// somehow related to the `ref` property\n\t\t// being intercepted by React here.\n\t\treturn React.createElement(inputComponent,\n\t\t{\n\t\t\t...rest,\n\t\t\tref: this.store_instance,\n\t\t\tvalue: format(is_empty(value) ? '' : value).text,\n\t\t\tonKeyDown: this.on_key_down,\n\t\t\tonChange: this.input_controller.onChange,\n\t\t\tonPaste: this.input_controller.onPaste,\n\t\t\tonCut: this.input_controller.onCut,\n\t\t\tonBlur: this.on_blur\n\t\t})\n\t}\n\n\t// Returns <input/> DOM Element\n\tget_input_element = () =>\n\t{\n\t\treturn ReactDOM.findDOMNode(this.input)\n\t}\n\n\t// This handler is a workaround for `redux-form`\n\ton_blur = (event) =>\n\t{\n\t\tconst { onBlur } = this.props\n\n\t\t// This `onBlur` interceptor is a workaround for `redux-form`,\n\t\t// so that it gets the right (parsed, not the formatted one)\n\t\t// `event.target.value` in its `onBlur` handler.\n\t\tif (onBlur)\n\t\t{\n\t\t\tconst _event =\n\t\t\t{\n\t\t\t\t...event,\n\t\t\t\ttarget:\n\t\t\t\t{\n\t\t\t\t\t...event.target,\n\t\t\t\t\tvalue: this.input_controller.getParsedValue().value\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// For `redux-form` event detection.\n\t\t\t// https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js\n\t\t\t_event.stopPropagation = event.stopPropagation\n\t\t\t_event.preventDefault  = event.preventDefault\n\n\t\t\tonBlur(_event)\n\t\t}\n\t}\n\n\ton_key_down = (event) =>\n\t{\n\t\tconst { onKeyDown } = this.props\n\n\t\tif (onKeyDown)\n\t\t{\n\t\t\tonKeyDown(event)\n\t\t}\n\n\t\tthis.input_controller.onKeyDown(event)\n\t}\n\n\tfocus()\n\t{\n\t\tthis.get_input_element().focus()\n\t}\n}\n\nfunction is_empty(value)\n{\n\treturn value === undefined || value === null\n}"]}