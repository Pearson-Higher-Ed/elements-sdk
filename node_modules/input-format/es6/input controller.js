import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import edit from './edit';
import parse from './parse';
import format from './format';

import { getSelection, getOperation, getCaretPosition, setCaretPosition } from './dom';

var Input_controller = function () {
	function Input_controller(get_input_element, parse, format, on_change) {
		_classCallCheck(this, Input_controller);

		_initialiseProps.call(this);

		if (typeof get_input_element !== 'function') {
			(function () {
				var element = get_input_element;
				get_input_element = function get_input_element() {
					return element;
				};
			})();
		}

		this.get_input_element = get_input_element;
		this.parse = parse;
		this.format = format;
		this.on_change = on_change;
	}

	// Special handling for "Cut" event because
	// it wouldn't copy to clipboard otherwise.


	// Intercepts "Delete" and "Backspace" keys
	// (hitting "Delete" or "Backspace"
	//  at any caret position should always result in
	//  erasing a digit)


	_createClass(Input_controller, [{
		key: 'erase_selection',


		// Erases the selected text inside an `<input/>`
		value: function erase_selection(input, selection) {
			var text = input.value;
			text = text.slice(0, selection.start) + text.slice(selection.end);

			input.value = text;
			setCaretPosition(input, selection.start);

			return this.format_input_text();
		}

		// Formats <input/> textual value as a phone number

	}, {
		key: 'getParsedValue',


		// Parses `<input/>` text
		value: function getParsedValue() {
			// <input/> DOM element
			var input = this.get_input_element();

			return parse(input.value, undefined, this.parse);
		}
	}]);

	return Input_controller;
}();

var _initialiseProps = function _initialiseProps() {
	var _this = this;

	this.onCut = function (event) {
		setTimeout(_this.format_input_text, 0);
	};

	this.onPaste = function (event) {
		var input = _this.get_input_element();

		var selection = getSelection(input);

		// If selection is made,
		// just erase the selected text
		// prior to pasting
		if (selection) {
			_this.erase_selection(input, selection);
		}

		_this.format_input_text();
	};

	this.onChange = function (event) {
		_this.format_input_text();
	};

	this.onKeyDown = function (event) {
		var operation = getOperation(event);

		switch (operation) {
			case 'Delete':
			case 'Backspace':
				// Intercept this operation and perform it manually.
				event.preventDefault();

				var input = _this.get_input_element();

				var selection = getSelection(input);

				// If selection is made,
				// just erase the selected text,
				// and don't apply any more operations to it.
				if (selection) {
					_this.erase_selection(input, selection);
					return _this.format_input_text();
				}

				// Else, perform the (character erasing) operation manually
				return _this.format_input_text(operation);
		}
	};

	this.format_input_text = function (operation) {
		// <input/> DOM element
		var input = _this.get_input_element();

		var _parse = parse(input.value, getCaretPosition(input), _this.parse),
		    value = _parse.value,
		    caret = _parse.caret;

		// Apply the pending operation to the <input/> textual value (if any)


		if (operation) {
			var edit_result = edit(value, caret, operation);

			value = edit_result.value;
			caret = edit_result.caret;
		}

		// Format the <input/> textual value as a phone number
		// (and reposition the caret accordingly)

		var format_result = format(value, caret, _this.format);

		var text = format_result.text;
		caret = format_result.caret;

		// Set <input/> textual value manually to also set caret position
		// and prevent React from resetting the caret position later
		// inside subsequent `render()`.
		// Doesn't work for custom `inputComponent`s for some reason.
		input.value = text;
		// Set caret position (with the neccessary adjustments)
		setCaretPosition(input, caret);

		// <input/> textual value may have been changed,
		// so `value` may have been changed too.
		_this.on_change(value);
	};
};

export default Input_controller;
//# sourceMappingURL=input controller.js.map